import html

from telegram import (
    ChatMemberAdministrator,
    ChatMemberOwner,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.constants import ChatID, ChatMemberStatus, ChatType, ParseMode
from telegram.error import BadRequest
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes, filters
from telegram.helpers import mention_html

from Exon import DRAGONS, application
from Exon.modules.disable import DisableAbleCommandHandler
from Exon.modules.helper_funcs.alternate import send_message
from Exon.modules.helper_funcs.chat_status import (
    ADMIN_CACHE,
    check_admin,
    connection_status,
)
from Exon.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from Exon.modules.log_channel import loggable


@connection_status
@loggable
@check_admin(permission="can_promote_members", is_both=True)
async def promote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    bot = context.bot
    args = context.args

    message = update.effective_message
    chat = update.effective_chat
    user = update.effective_user

    user_id = await extract_user(message, context, args)
    await chat.get_member(user.id)

    if message.from_user.id == ChatID.ANONYMOUS_ADMIN:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥.",
                            callback_data=f"admin_=promote={user_id}",
                        ),
                    ],
                ],
            ),
        )

        return

    if not user_id:
        await message.reply_text(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
        )
        return

    try:
        user_member = await chat.get_member(user_id)
    except:
        return

    if (
        user_member.status == ChatMemberStatus.ADMINISTRATOR
        or user_member.status == ChatMemberStatus.OWNER
    ):
        await message.reply_text(
            " ú·¥è·¥° ·¥Ä·¥ç …™ ·¥ç·¥á·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á ·¥õ ú·¥Ä·¥õ's ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥?"
        )
        return

    if user_id == bot.id:
        await message.reply_text(
            "I ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì! …¢·¥á·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è …™·¥õ “ì·¥è Ä ·¥ç·¥á."
        )
        return

    # set same perms as bot - bot can't assign higher perms than itself!
    bot_member = await chat.get_member(bot.id)

    if isinstance(bot_member, ChatMemberAdministrator):
        try:
            await bot.promoteChatMember(
                chat.id,
                user_id,
                can_change_info=bot_member.can_change_info,
                can_post_messages=bot_member.can_post_messages,
                can_edit_messages=bot_member.can_edit_messages,
                can_delete_messages=bot_member.can_delete_messages,
                can_invite_users=bot_member.can_invite_users,
                # can_promote_members=bot_member.can_promote_members,
                can_restrict_members=bot_member.can_restrict_members,
                can_pin_messages=bot_member.can_pin_messages,
                can_manage_chat=bot_member.can_manage_chat,
                can_manage_video_chats=bot_member.can_manage_video_chats,
                can_manage_topics=bot_member.can_manage_topics,
            )
        except BadRequest as err:
            if err.message == "User_not_mutual_contact":
                await message.reply_text(
                    "I ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á ·¥° ú·¥è …™s…¥'·¥õ …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò."
                )
            else:
                await message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥ç·¥è·¥õ…™…¥…¢.")
            return

    await bot.sendMessage(
        chat.id,
        f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö <b>{user_member.user.first_name or user_id}</b>!",
        parse_mode=ParseMode.HTML,
        message_thread_id=message.message_thread_id if chat.is_forum else None,
    )

    log_message = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêèùêëùêéùêåùêéùêìùêÑùêÉ\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(user_member.user.id, user_member.user.first_name)}"
    )

    return log_message


@connection_status
@loggable
@check_admin(permission="can_promote_members", is_both=True)
async def demote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    bot = context.bot
    args = context.args

    chat = update.effective_chat
    message = update.effective_message
    user = update.effective_user

    user_id = await extract_user(message, context, args)
    await chat.get_member(user.id)

    if message.from_user.id == ChatID.ANONYMOUS_ADMIN:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥.",
                            callback_data=f"admin_=demote={user_id}",
                        ),
                    ],
                ],
            ),
        )

        return

    if not user_id:
        await message.reply_text(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á …™·¥Ö s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
        )
        return

    try:
        user_member = await chat.get_member(user_id)
    except:
        return

    if user_member.status == ChatMemberStatus.OWNER:
        await message.reply_text(
            "·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ CREATED ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ,  ú·¥è·¥° ·¥°·¥è·¥ú ü·¥Ö …™ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú·¥á·¥ç?"
        )
        return

    if not user_member.status == ChatMemberStatus.ADMINISTRATOR:
        await message.reply_text("·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥° ú·¥Ä·¥õ ·¥°·¥Äs…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö!")
        return

    if user_id == bot.id:
        await message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì !.")
        return

    try:
        await bot.promote_chat_member(
            chat.id,
            user_id,
            can_change_info=False,
            can_post_messages=False,
            can_edit_messages=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False,
            can_manage_chat=False,
            can_manage_video_chats=False,
            can_manage_topics=False,
        )

        await bot.sendMessage(
            chat.id,
            f"s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö <b>{user_member.user.first_name or user_id}</b>!",
            parse_mode=ParseMode.HTML,
            message_thread_id=message.message_thread_id if chat.is_forum else None,
        )

        log_message = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêÉùêÑùêåùêéùêìùêÑùêÉ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
            f"<b>·¥ús·¥á Ä:</b> {mention_html(user_member.user.id, user_member.user.first_name)}"
        )

        return log_message
    except BadRequest:
        await message.reply_text(
            "·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á. I ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ô·¥á ·¥Ä·¥Ö·¥ç…™…¥, ·¥è Ä ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ s·¥õ·¥Ä·¥õ·¥ús ·¥°·¥Äs ·¥Ä·¥ò·¥ò·¥è…™…¥·¥õ·¥á·¥Ö  ô è ·¥Ä…¥·¥è·¥õ ú·¥á Ä"
            " ·¥ús·¥á Ä, s·¥è I ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä·¥Ñ·¥õ ·¥ú·¥ò·¥è…¥ ·¥õ ú·¥á·¥ç!",
        )
        raise


@check_admin(is_user=True)
async def refresh_admin(update, _):
    try:
        ADMIN_CACHE.pop(update.effective_chat.id)
    except KeyError:
        pass

    await update.effective_message.reply_text("·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä·¥Ñ ú·¥á  Ä·¥á“ì Ä·¥ás ú·¥á·¥Ö!")


@connection_status
@check_admin(permission="can_promote_members", is_both=True)
async def set_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    args = context.args

    chat = update.effective_chat
    message = update.effective_message

    user_id, title = await extract_user_and_text(message, context, args)

    if message.from_user.id == 1087968824:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥.",
                            callback_data=f"admin_=title={user_id}={title}",
                        ),
                    ],
                ],
            ),
        )

        return

    try:
        user_member = await chat.get_member(user_id)
    except:
        return

    if not user_id:
        await message.reply_text(
            "You ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
        )
        return

    if user_member.status == ChatMemberStatus.OWNER:
        await message.reply_text(
            "·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ CREATED ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ,  ú·¥è·¥° ·¥Ñ·¥Ä…¥ …™ s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á “ì·¥è Ä  ú…™·¥ç?",
        )
        return

    if user_member.status != ChatMemberStatus.ADMINISTRATOR:
        await message.reply_text(
            "·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥õ ·¥õ…™·¥õ ü·¥á “ì·¥è Ä …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥s!\n·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥õ ú·¥á·¥ç “ì…™ Äs·¥õ ·¥õ·¥è s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á!",
        )
        return

    if user_id == bot.id:
        await message.reply_text(
            "I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥õ ·¥ç è ·¥è·¥°…¥ ·¥õ…™·¥õ ü·¥á ·¥ç ès·¥á ü“ì! …¢·¥á·¥õ ·¥õ ú·¥á ·¥è…¥·¥á ·¥° ú·¥è ·¥ç·¥Ä·¥Ö·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è …™·¥õ “ì·¥è Ä ·¥ç·¥á.",
        )
        return

    if not title:
        await message.reply_text("s·¥á·¥õ·¥õ…™…¥…¢  ô ü·¥Ä…¥·¥ã ·¥õ…™·¥õ ü·¥á ·¥Ö·¥è·¥ás…¥'·¥õ ·¥Ö·¥è ·¥Ä…¥ è·¥õ ú…™…¥…¢!")
        return

    if len(title) > 16:
        await message.reply_text(
            "·¥õ ú·¥á ·¥õ…™·¥õ ü·¥á  ü·¥á…¥…¢·¥õ ú …™s  ü·¥è…¥…¢·¥á Ä ·¥õ ú·¥Ä…¥ 16 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs.\n·¥õ Ä·¥ú…¥·¥Ñ·¥Ä·¥õ…™…¥…¢ …™·¥õ ·¥õ·¥è 16 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs.",
        )

    try:
        await bot.setChatAdministratorCustomTitle(chat.id, user_id, title)
    except BadRequest:
        await message.reply_text(
            "·¥á…™·¥õ ú·¥á Ä ·¥õ ú·¥á è ·¥Ä Ä·¥á…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö  ô è ·¥ç·¥á ·¥è Ä  è·¥è·¥ú s·¥á·¥õ ·¥Ä ·¥õ…™·¥õ ü·¥á ·¥õ·¥áx·¥õ ·¥õ ú·¥Ä·¥õ …™s …™·¥ç·¥ò·¥èss…™ ô ü·¥á ·¥õ·¥è s·¥á·¥õ."
        )
        raise

    await bot.sendMessage(
        chat.id,
        f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥õ…™·¥õ ü·¥á “ì·¥è Ä <code>{user_member.user.first_name or user_id}</code> "
        f"·¥õ·¥è <code>{html.escape(title[:16])}</code>!",
        parse_mode=ParseMode.HTML,
        message_thread_id=message.message_thread_id if chat.is_forum else None,
    )


@loggable
@check_admin(permission="can_pin_messages", is_both=True)
async def pin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    bot = context.bot
    args = context.args

    user = update.effective_user
    chat = update.effective_chat
    message = update.effective_message

    is_group = chat.type != "private" and chat.type != "channel"
    prev_message = update.effective_message.reply_to_message

    is_silent = True
    if len(args) >= 1:
        is_silent = not (
            args[0].lower() == "notify"
            or args[0].lower() == "loud"
            or args[0].lower() == "violent"
        )

    if not prev_message:
        await message.reply_text("·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥ç·¥áss·¥Ä…¢·¥á ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò…™…¥.")
        return

    if message.from_user.id == 1087968824:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥.",
                            callback_data=f"admin_=pin={prev_message.message_id}={is_silent}",
                        ),
                    ],
                ],
            ),
        )

        return

    if prev_message and is_group:
        try:
            await bot.pinChatMessage(
                chat.id,
                prev_message.message_id,
                disable_notification=is_silent,
            )
        except BadRequest as excp:
            if excp.message == "Chat_not_modified":
                pass
            else:
                raise
        log_message = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêèùêàùêçùêçùêÑùêÉ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}"
        )

        return log_message


@loggable
@check_admin(permission="can_pin_messages", is_both=True)
async def unpin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    bot = context.bot
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message

    if message.from_user.id == 1087968824:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è prove Admin.",
                            callback_data=f"admin_=unpin",
                        ),
                    ],
                ],
            ),
        )

        return

    try:
        await bot.unpinChatMessage(chat.id)
    except BadRequest as excp:
        if excp.message == "Chat_not_modified":
            pass
        elif excp.message == "·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ú…¥·¥ò…™…¥ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö":
            await message.reply_text("…¥·¥è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è·¥ú…¥·¥Ö")
            return
        else:
            raise

    log_message = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêîùêçùêèùêàùêçùêçùêÑùêÉ\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}"
    )

    return log_message


@loggable
@check_admin(permission="can_pin_messages", is_both=True)
async def unpinall(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    bot = context.bot
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    admin_member = await chat.get_member(user.id)

    if message.from_user.id == 1087968824:

        await message.reply_text(
            text=" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥Ñ ü…™·¥Ñ·¥ã ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥.",
                            callback_data=f"admin_=unpinall",
                        ),
                    ],
                ],
            ),
        )

        return
    elif not admin_member.status == ChatMemberStatus.OWNER and user.id not in DRAGONS:
        await message.reply_text("·¥è…¥ ü è ·¥Ñ ú·¥Ä·¥õ OWNER ·¥Ñ·¥Ä…¥ ·¥ú…¥·¥ò…™…¥ ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás.")
        return

    try:
        if chat.is_forum:
            await bot.unpin_all_forum_topic_messages(chat.id, message.message_thread_id)
        else:
            await bot.unpin_all_chat_messages(chat.id)
    except BadRequest as excp:
        if excp.message == "Chat_not_modified":
            pass
        else:
            raise

    log_message = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêîùêçùêèùêàùêçùêçùêÑùêÉ_ùêÄùêãùêã\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}"
    )

    return log_message


@connection_status
@check_admin(permission="can_invite_users", is_bot=True)
async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    chat = update.effective_chat

    if chat.username:
        await update.effective_message.reply_text(f"https://t.me/{chat.username}")
    elif chat.type in [ChatType.SUPERGROUP, ChatType.CHANNEL]:
        bot_member = await chat.get_member(bot.id)
        if (
            bot_member.can_invite_users
            if isinstance(bot_member, ChatMemberAdministrator)
            else None
        ):
            invitelink = await bot.exportChatInviteLink(chat.id)
            await update.effective_message.reply_text(invitelink)
        else:
            await update.effective_message.reply_text(
                "I ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥õ ú·¥á …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã, ·¥õ Ä è ·¥Ñ ú·¥Ä…¥…¢…™…¥…¢ ·¥ç è ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s!",
            )
    else:
        await update.effective_message.reply_text(
            "I ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è …¢…™·¥†·¥á  è·¥è·¥ú …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ãs “ì·¥è Ä s·¥ú·¥ò·¥á Ä…¢ Ä·¥è·¥ú·¥òs ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs, s·¥è Ä Ä è!",
        )


@connection_status
async def adminlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user  # type: Optional[User]
    bot = context.bot

    if update.effective_message.chat.type == "private":
        await send_message(
            update.effective_message, "·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs."
        )
        return

    chat_id = update.effective_chat.id

    try:
        msg = await update.effective_message.reply_text(
            "“ì·¥á·¥õ·¥Ñ ú…™…¥…¢ …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s...",
            parse_mode=ParseMode.HTML,
        )
    except BadRequest:
        msg = await update.effective_message.reply_text(
            "“ì·¥á·¥õ·¥Ñ ú…™…¥…¢ …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s...",
            quote=False,
            parse_mode=ParseMode.HTML,
        )

    administrators = await bot.getChatAdministrators(chat_id)
    text = "·¥Ä·¥Ö·¥ç…™…¥s …™…¥ <b>{}</b>:".format(html.escape(update.effective_chat.title))

    custom_admin_list = {}
    normal_admin_list = []

    for admin in administrators:
        if isinstance(admin, (ChatMemberAdministrator, ChatMemberOwner)):
            user = admin.user
            status = admin.status
            custom_title = admin.custom_title

            if user.first_name == "":
                name = "‚ò† ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ"
            else:
                name = "{}".format(
                    mention_html(
                        user.id,
                        html.escape(user.first_name + " " + (user.last_name or "")),
                    ),
                )

            # if user.username:
            #    name = escape_markdown("@" + user.username)
            if status == ChatMemberStatus.OWNER:
                text += "\n üëë ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä:"
                text += "\n<code> ‚Ä¢ </code>{}\n".format(name)

                if custom_title:
                    text += f"<code> ‚îó‚îÅ {html.escape(custom_title)}</code>\n"

            if status == ChatMemberStatus.ADMINISTRATOR:
                if custom_title:
                    try:
                        custom_admin_list[custom_title].append(name)
                    except KeyError:
                        custom_admin_list.update({custom_title: [name]})
                else:
                    normal_admin_list.append(name)

    text += "\nüî± ·¥Ä·¥Ö·¥ç…™…¥s:"

    for admin in normal_admin_list:
        text += "\n<code> ‚Ä¢ </code>{}".format(admin)

    for admin_group in custom_admin_list.copy():
        if len(custom_admin_list[admin_group]) == 1:
            text += "\n<code> ‚Ä¢ </code>{} | <code>{}</code>".format(
                custom_admin_list[admin_group][0],
                html.escape(admin_group),
            )
            custom_admin_list.pop(admin_group)

    text += "\n"
    for admin_group, value in custom_admin_list.items():
        text += "\nüö® <code>{}</code>".format(admin_group)
        for admin in value:
            text += "\n<code> ‚Ä¢ </code>{}".format(admin)
        text += "\n"

    try:
        await msg.edit_text(text, parse_mode=ParseMode.HTML)
    except BadRequest:  # if original message is deleted
        return


@loggable
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    bot = context.bot
    message = update.effective_message
    chat = update.effective_chat
    admin_user = query.from_user

    splitter = query.data.replace("admin_", "").split("=")

    if splitter[1] == "promote":

        promoter = await chat.get_member(admin_user.id)

        if (
            not (
                promoter.can_promote_members
                if isinstance(promoter, ChatMemberAdministrator)
                else None or promoter.status == ChatMemberStatus.OWNER
            )
            and admin_user.id not in DRAGONS
        ):
            await query.answer(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥á·¥Ñ·¥áss·¥Ä Ä è  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ!", show_alert=True
            )
            return

        try:
            user_id = int(splitter[2])
        except ValueError:
            user_id = splitter[2]
            await message.edit_text(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..."
            )
            return

        try:
            user_member = await chat.get_member(user_id)
        except:
            return

        if (
            user_member.status == ChatMemberStatus.ADMINISTRATOR
            or user_member.status == ChatMemberStatus.OWNER
        ):
            await message.edit_text(
                " ú·¥è·¥° ·¥Ä·¥ç I ·¥ç·¥á·¥Ä…¥·¥õ ·¥õ·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á ·¥õ ú·¥Ä·¥õ's ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥?"
            )
            return

        bot_member = await chat.get_member(bot.id)

        if isinstance(bot_member, ChatMemberAdministrator):
            try:
                await bot.promoteChatMember(
                    chat.id,
                    user_id,
                    can_change_info=bot_member.can_change_info,
                    can_post_messages=bot_member.can_post_messages,
                    can_edit_messages=bot_member.can_edit_messages,
                    can_delete_messages=bot_member.can_delete_messages,
                    can_invite_users=bot_member.can_invite_users,
                    # can_promote_members=bot_member.can_promote_members,
                    can_restrict_members=bot_member.can_restrict_members,
                    can_pin_messages=bot_member.can_pin_messages,
                    can_manage_chat=bot_member.can_manage_chat,
                    can_manage_video_chats=bot_member.can_manage_video_chats,
                )
            except BadRequest as err:
                if err.message == "User_not_mutual_contact":
                    await message.edit_text(
                        "I ·¥Ñ·¥Ä…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á ·¥° ú·¥è …™s…¥'·¥õ …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò"
                    )
                else:
                    await message.edit_text("An ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥ç·¥è·¥õ…™…¥…¢.")
                return

        await message.edit_text(
            f"s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö <b>{user_member.user.first_name or user_id}</b>!",
            parse_mode=ParseMode.HTML,
        )
        await query.answer("Done")

        log_message = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêèùêëùêéùêåùêéùêìùêÑùêÉ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(admin_user.id, admin_user.first_name)}\n"
            f"<b>·¥ús·¥á Ä:</b> {mention_html(user_member.user.id, user_member.user.first_name)}"
        )

        return log_message

    elif splitter[1] == "demote":

        demoter = await chat.get_member(admin_user.id)

        if not (
            demoter.can_promote_members
            if isinstance(demoter, ChatMemberAdministrator)
            else None or demoter.status == ChatMemberStatus.OWNER
        ):
            await query.answer(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥á·¥Ñ·¥áss·¥Ä Ä è  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ!", show_alert=True
            )
            return

        try:
            user_id = int(splitter[2])
        except:
            user_id = splitter[2]
            await message.edit_text(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ.."
            )
            return

        try:
            user_member = await chat.get_member(user_id)
        except:
            return

        if user_member.status == ChatMemberStatus.OWNER:
            await message.edit_text(
                "·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ CREATED ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ,  ú·¥è·¥° ·¥°·¥è·¥ú ü·¥Ö I ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú·¥á·¥ç?"
            )
            return

        if not user_member.status == ChatMemberStatus.ADMINISTRATOR:
            await message.edit_text("Can't demote what wasn't promoted!")
            return

        if user_id == bot.id:
            await message.edit_text(
                "I ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ç ès·¥á ü“ì!, …¢·¥á·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è …™·¥õ “ì·¥è Ä ·¥ç·¥á."
            )
            return

        try:
            await bot.promoteChatMember(
                chat.id,
                user_id,
                can_change_info=False,
                can_post_messages=False,
                can_edit_messages=False,
                can_delete_messages=False,
                can_invite_users=False,
                can_restrict_members=False,
                can_pin_messages=False,
                can_promote_members=False,
                can_manage_chat=False,
                can_manage_video_chats=False,
            )

            await message.edit_text(
                f"s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö <b>{user_member.user.first_name or user_id}</b>!",
                parse_mode=ParseMode.HTML,
            )
            await query.answer("·¥Ö·¥è…¥·¥á")

            log_message = (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#ùêÉùêÑùêåùêéùêìùêÑùêÉ\n"
                f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(admin_user.id, admin_user.first_name)}\n"
                f"<b>·¥ús·¥á Ä:</b> {mention_html(user_member.user.id, user_member.user.first_name)}"
            )

            return log_message
        except BadRequest:
            await message.edit_text(
                "·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á. I ·¥ç…™…¢ ú·¥õ …¥·¥è·¥õ  ô·¥á ·¥Ä·¥Ö·¥ç…™…¥, ·¥è Ä ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ s·¥õ·¥Ä·¥õ·¥ús ·¥°·¥Äs ·¥Ä·¥ò·¥ò·¥è…™…¥·¥õ·¥á·¥Ö  ô è ·¥Ä…¥·¥è·¥õ ú·¥á Ä"
                " user, so I can't act upon them!",
            )
            return

    elif splitter[1] == "title":
        title = splitter[3]

        admin_member = await chat.get_member(admin_user.id)

        if (
            not (
                (
                    admin_member.can_promote_members
                    if isinstance(admin_member, ChatMemberAdministrator)
                    else None
                )
                or admin_member.status == ChatMemberStatus.OWNER
            )
            and admin_user.id not in DRAGONS
        ):
            await query.answer(" è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥á·¥Ñ·¥áss·¥Ä Ä è  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ!")
            return

        try:
            user_id = int(splitter[2])
        except:
            await message.edit_text(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
            )
            return

        try:
            user_member = await chat.get_member(user_id)
        except:
            return

        if user_member.status == ChatMemberStatus.OWNER:
            await message.edit_text(
                "·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥ CREATED ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ,  ú·¥è·¥° ·¥Ñ·¥Ä…¥ I s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á “ì·¥è Ä  ú…™·¥ç?",
            )
            return

        if user_member.status != ChatMemberStatus.ADMINISTRATOR:
            await message.edit_text(
                "·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥õ ·¥õ…™·¥õ ü·¥á “ì·¥è Ä …¥·¥è…¥--·¥Ä·¥Ö·¥ç…™…¥s!\n·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥õ ú·¥á·¥ç “ì…™ Äs·¥õ ·¥õ·¥è s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á!",
            )
            return

        if user_id == bot.id:
            await message.edit_text(
                "I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥õ ·¥ç è ·¥è·¥°…¥ ·¥õ…™·¥õ ü·¥á ·¥ç ès·¥á ü“ì! …¢·¥á·¥õ ·¥õ ú·¥á ·¥è…¥·¥á ·¥° ú·¥è ·¥ç·¥Ä·¥Ö·¥á ·¥ç·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è …™·¥õ “ì·¥è Ä ·¥ç·¥á.",
            )
            return

        if not title:
            await message.edit_text("s·¥á·¥õ·¥õ…™…¥…¢  ô ü·¥Ä…¥·¥ã ·¥õ…™·¥õ ü·¥á ·¥Ö·¥è·¥ás…¥'·¥õ ·¥Ö·¥è ·¥Ä…¥ è·¥õ ú…™…¥…¢!")
            return

        if len(title) > 16:
            await message.edit_text(
                "·¥õ ú·¥á ·¥õ…™·¥õ ü·¥á  ü·¥á…¥…¢·¥õ ú …™s  ü·¥è…¥…¢·¥á Ä ·¥õ ú·¥Ä…¥ 16 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs.\n·¥õ Ä·¥ú…¥·¥Ñ·¥Ä·¥õ…™…¥…¢ …™·¥õ ·¥õ·¥è 16 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs.",
            )

        try:
            await bot.setChatAdministratorCustomTitle(chat.id, user_id, title)
        except BadRequest:
            await message.edit_text(
                "·¥á…™·¥õ ú·¥á Ä ·¥õ ú·¥á è ·¥Ä Ä·¥á…¥'·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö  ô è ·¥ç·¥á ·¥è Ä  è·¥è·¥ú s·¥á·¥õ ·¥Ä ·¥õ…™·¥õ ü·¥á ·¥õ·¥áx·¥õ ·¥õ ú·¥Ä·¥õ …™s …™·¥ç·¥ò·¥èss…™ ô ü·¥á ·¥õ·¥è s·¥á·¥õ."
            )
            return

        await message.edit_text(
            text=f"s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥õ…™·¥õ ü·¥á “ì·¥è Ä <code>{user_member.user.first_name or user_id}</code> "
            f"·¥õ·¥è <code>{html.escape(title[:16])}</code>!",
            parse_mode=ParseMode.HTML,
        )

    elif splitter[1] == "pin":

        admin_member = await chat.get_member(admin_user.id)

        if (
            not (
                (
                    admin_member.can_pin_messages
                    if isinstance(admin_member, ChatMemberAdministrator)
                    else None
                )
                or admin_member.status == ChatMemberStatus.OWNER
            )
            and admin_user.id not in DRAGONS
        ):
            await query.answer(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥á·¥Ñ·¥áss·¥Ä Ä è  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ!", show_alert=True
            )
            return

        try:
            message_id = int(splitter[2])
        except:
            return

        is_silent = bool(splitter[3])
        is_group = chat.type != "private" and chat.type != "channel"

        if is_group:
            try:
                await bot.pinChatMessage(
                    chat.id,
                    message_id,
                    disable_notification=is_silent,
                )
            except BadRequest as excp:
                if excp.message == "Chat_not_modified":
                    pass
                else:
                    raise

            await message.edit_text("Done Pinned.")

            log_message = (
                f"<b>{html.escape(chat.title)}</b>\n"
                f"#ùêèùêàùêçùêçùêÑùêÉ\n"
                f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(admin_user.id, html.escape(admin_user.first_name))}"
            )

            return log_message

    elif splitter[1] == "unpin":

        admin_member = await chat.get_member(admin_user.id)

        if (
            not (
                (
                    admin_member.can_pin_messages
                    if isinstance(admin_member, ChatMemberAdministrator)
                    else None
                )
                or admin_member.status == ChatMemberStatus.OWNER
            )
            and admin_user.id not in DRAGONS
        ):
            await query.answer(
                " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥á·¥Ñ·¥áss·¥Ä Ä è  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ!",
                show_alert=True,
            )
            return

        try:
            await bot.unpinChatMessage(chat.id)
        except BadRequest as excp:
            if excp.message == "Chat_not_modified":
                pass
            elif excp.message == "·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ú…¥·¥ò…™…¥ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö":
                await message.edit_text("…¥·¥è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è·¥ú…¥·¥Ö")
                return
            else:
                raise

        log_message = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêîùêçùêèùêàùêçùêçùêÑùêÉ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(admin_user.id, html.escape(admin_user.first_name))}"
        )

        return log_message

    elif splitter[1] == "unpinall":
        admin_member = await chat.get_member(admin_user.id)

        if (
            not admin_member.status == ChatMemberStatus.OWNER
            and admin_user.id not in DRAGONS
        ):
            await query.answer("·¥è…¥ ü è ·¥Ñ ú·¥Ä·¥õ OWNER ·¥Ñ·¥Ä…¥ ·¥ú…¥·¥ò…™…¥ ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás.")
            return

        try:
            if chat.is_forum:
                await bot.unpin_all_forum_topic_messages(
                    chat.id, message.message_thread_id
                )
            else:
                await bot.unpin_all_chat_messages(chat.id)
        except BadRequest as excp:
            if excp.message == "Chat_not_modified":
                pass
            else:
                raise

        await message.edit_text("·¥Ö·¥è…¥·¥á ·¥ú…¥·¥ò…™…¥…¥·¥á·¥Ö ·¥Ä ü ü ·¥ç·¥áss·¥Ä…¢·¥ás.")
        log_message = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêîùêçùêèùêàùêçùêçùêÑùêÉ_ùêÄùêãùêã\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(admin_user.id, html.escape(admin_user.first_name))}"
        )

        return log_message


__help__ = """
 ‚Ä¢ /admins*:*  ü…™s·¥õ ·¥è“ì ·¥Ä·¥Ö·¥ç…™…¥s …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ

*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è:*
 ‚Ä¢ /pin*:* s…™ ü·¥á…¥·¥õ ü è ·¥ò…™…¥s ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥õ·¥è - ·¥Ä·¥Ö·¥Ö `'loud'` ·¥è Ä `'notify'` ·¥õ·¥è …¢…™·¥†·¥á …¥·¥è·¥õ…™“ìs ·¥õ·¥è ·¥ús·¥á Äs
 ‚Ä¢ /unpin*:* ·¥ú…¥·¥ò…™…¥s ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
 ‚Ä¢ /unpinall*:* ·¥ú…¥·¥ò…™…¥s ·¥Ä ü ü ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á, ·¥°·¥è Ä·¥ãs …™…¥ ·¥õ·¥è·¥ò…™·¥Ñs ·¥õ·¥è·¥è (·¥è…¥ ü è OWNER ·¥Ñ·¥Ä…¥ ·¥Ö·¥è.)
 ‚Ä¢ /invitelink*:* …¢·¥á·¥õs …™…¥·¥†…™·¥õ·¥á ü…™…¥·¥ã
 ‚Ä¢ /promote*:* ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥ás ·¥õ ú·¥á ·¥ús·¥á Ä  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥õ·¥è
 ‚Ä¢ /demote*:* ·¥Ö·¥á·¥ç·¥è·¥õ·¥ás ·¥õ ú·¥á ·¥ús·¥á Ä  Ä·¥á·¥ò ü…™·¥á·¥Ö to
 ‚Ä¢ /title <·¥õ…™·¥õ ü·¥á  ú·¥á Ä·¥á>*:* s·¥á·¥õs ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥õ…™·¥õ ü·¥á “ì·¥è Ä ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ ú·¥Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö
 ‚Ä¢ /admincache*:* “ì·¥è Ä·¥Ñ·¥á  Ä·¥á“ì Ä·¥ás ú ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s  ü…™s·¥õ
"""

ADMINLIST_HANDLER = DisableAbleCommandHandler("admins", adminlist, block=False)

PIN_HANDLER = CommandHandler("pin", pin, filters=filters.ChatType.GROUPS, block=False)
UNPIN_HANDLER = CommandHandler(
    "unpin", unpin, filters=filters.ChatType.GROUPS, block=False
)
UNPINALL_HANDLER = CommandHandler(
    "unpinall", unpinall, filters=filters.ChatType.GROUPS, block=False
)

INVITE_HANDLER = DisableAbleCommandHandler("invitelink", invite, block=False)

PROMOTE_HANDLER = DisableAbleCommandHandler("promote", promote, block=False)
DEMOTE_HANDLER = DisableAbleCommandHandler("demote", demote, block=False)

SET_TITLE_HANDLER = CommandHandler("title", set_title, block=False)
ADMIN_REFRESH_HANDLER = CommandHandler(
    "admincache", refresh_admin, filters=filters.ChatType.GROUPS, block=False
)
ADMIN_CALLBACK_HANDLER = CallbackQueryHandler(
    admin_callback, block=False, pattern=r"admin_"
)

application.add_handler(ADMINLIST_HANDLER)
application.add_handler(PIN_HANDLER)
application.add_handler(UNPIN_HANDLER)
application.add_handler(UNPINALL_HANDLER)
application.add_handler(INVITE_HANDLER)
application.add_handler(PROMOTE_HANDLER)
application.add_handler(DEMOTE_HANDLER)
application.add_handler(SET_TITLE_HANDLER)
application.add_handler(ADMIN_REFRESH_HANDLER)
application.add_handler(ADMIN_CALLBACK_HANDLER)

__mod_name__ = "ùêÄ·¥Ö·¥ç…™…¥"
__command_list__ = [
    "adminlist",
    "admins",
    "invitelink",
    "promote",
    "demote",
    "admincache",
]
__handlers__ = [
    ADMINLIST_HANDLER,
    PIN_HANDLER,
    UNPIN_HANDLER,
    INVITE_HANDLER,
    PROMOTE_HANDLER,
    DEMOTE_HANDLER,
    SET_TITLE_HANDLER,
    ADMIN_REFRESH_HANDLER,
]
