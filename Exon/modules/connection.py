import re
import time

from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes

import Exon.modules.sql.connection_sql as sql
from Exon import DEV_USERS, DRAGONS, application
from Exon.modules.helper_funcs.alternate import send_message, typing_action

try:
    from Exon.modules.helper_funcs import chat_status
except ImportError as e:
    print(e)

check_admin = chat_status.check_admin


@check_admin(is_user=True)
@typing_action
async def allow_connections(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:

    chat = update.effective_chat
    args = context.args

    if chat.type != chat.PRIVATE:
        if len(args) >= 1:
            var = args[0]
            if var == "no":
                sql.set_allow_connect_to_chat(chat.id, False)
                await send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
                )
            elif var == "yes":
                sql.set_allow_connect_to_chat(chat.id, True)
                await send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ",
                )
            else:
                await send_message(
                    update.effective_message,
                    "Please enter `yes` or `no`!",
                    parse_mode=ParseMode.MARKDOWN,
                )
        else:
            get_settings = sql.allow_connect_to_chat(chat.id)
            if get_settings:
                await send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *·¥Ä ü ü·¥è·¥°·¥á·¥Ö* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
                    parse_mode=ParseMode.MARKDOWN,
                )
            else:
                await send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ä Ä·¥á *…¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö* “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs!",
                    parse_mode=ParseMode.MARKDOWN,
                )
    else:
        await send_message(
            update.effective_message,
            "·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s “ì·¥è Ä …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è. …¥·¥è·¥õ …™…¥ ·¥ò·¥ç!",
        )


@typing_action
async def connection_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):

    chat = update.effective_chat
    user = update.effective_user

    conn = await connected(context.bot, update, chat, user.id, need_admin=True)

    if conn:
        chat = await application.bot.getChat(conn)
        chat_obj = await application.bot.getChat(conn)
        chat_name = chat_obj.title
    else:
        if update.effective_message.chat.type != "private":
            return
        chat = update.effective_chat
        chat_name = update.effective_message.chat.title

    if conn:
        message = " è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è {}.\n".format(chat_name)
    else:
        message = " è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …™…¥ ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥ò.\n"
    await send_message(update.effective_message, message, parse_mode="markdown")


@typing_action
async def connect_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):

    chat = update.effective_chat
    user = update.effective_user
    args = context.args

    if update.effective_chat.type == "private":
        if args and len(args) >= 1:
            try:
                connect_chat = int(args[0])
                getstatusadmin = await context.bot.get_chat_member(
                    connect_chat,
                    update.effective_message.from_user.id,
                )
            except ValueError:
                try:
                    connect_chat = str(args[0])
                    get_chat = await context.bot.getChat(connect_chat)
                    connect_chat = get_chat.id
                    getstatusadmin = await context.bot.get_chat_member(
                        connect_chat,
                        update.effective_message.from_user.id,
                    )
                except BadRequest:
                    await send_message(update.effective_message, "Invalid Chat ID!")
                    return
            except BadRequest:
                await send_message(update.effective_message, "Invalid Chat ID!")
                return

            isadmin = getstatusadmin.status in ("administrator", "creator")
            ismember = getstatusadmin.status in ("member")
            isallow = sql.allow_connect_to_chat(connect_chat)

            if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
                connection_status = sql.connect(
                    update.effective_message.from_user.id,
                    connect_chat,
                )
                if connection_status:
                    conn = await connected(
                        context.bot, update, chat, user.id, need_admin=False
                    )
                    conn_chat = await application.bot.getChat(conn)
                    chat_name = conn_chat.title
                    await send_message(
                        update.effective_message,
                        "s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \n·¥ús·¥á /helpconnect ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á commands.".format(
                            chat_name,
                        ),
                        parse_mode=ParseMode.MARKDOWN,
                    )
                    sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
                else:
                    await send_message(update.effective_message, "Connection failed!")
            else:
                await send_message(
                    update.effective_message,
                    "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                )
        else:
            gethistory = sql.get_history_conn(user.id)
            if gethistory:
                buttons = [
                    InlineKeyboardButton(
                        text="‚ùé ·¥Ñ ü·¥ès·¥á  ô·¥ú·¥õ·¥õ·¥è…¥",
                        callback_data="connect_close",
                    ),
                    InlineKeyboardButton(
                        text="üßπ ·¥Ñ ü·¥á·¥Ä Ä  ú…™s·¥õ·¥è Ä è",
                        callback_data="connect_clear",
                    ),
                ]
            else:
                buttons = []
            conn = await connected(context.bot, update, chat, user.id, need_admin=False)
            if conn:
                connectedchat = await application.bot.getChat(conn)
                text = " è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}* (`{}`)".format(
                    connectedchat.title,
                    conn,
                )
                buttons.append(
                    InlineKeyboardButton(
                        text="üîå ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ",
                        callback_data="connect_disconnect",
                    ),
                )
            else:
                text = "·¥° Ä…™·¥õ·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ID ·¥è Ä ·¥õ·¥Ä…¢ ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ!"
            if gethistory:
                text += "\n\n*·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  ú…™s·¥õ·¥è Ä è:*\n"
                text += "‚ïí‚ïê‚ïê‚ïê„Äå *…™…¥“ì·¥è* „Äç\n"
                text += "‚îÇ  s·¥è Ä·¥õ·¥á·¥Ö: `…¥·¥á·¥°·¥ás·¥õ`\n"
                text += "‚îÇ\n"
                buttons = [buttons]
                for x in sorted(gethistory.keys(), reverse=True):
                    htime = time.strftime("%d/%m/%Y", time.localtime(x))
                    text += "‚ïû‚ïê„Äå *{}* „Äç\n‚îÇ   `{}`\n‚îÇ   `{}`\n".format(
                        gethistory[x]["chat_name"],
                        gethistory[x]["chat_id"],
                        htime,
                    )
                    text += "‚îÇ\n"
                    buttons.append(
                        [
                            InlineKeyboardButton(
                                text=gethistory[x]["chat_name"],
                                callback_data="connect({})".format(
                                    gethistory[x]["chat_id"],
                                ),
                            ),
                        ],
                    )
                text += "‚ïò‚ïê‚ïê„Äå ·¥õ·¥è·¥õ·¥Ä ü {} ·¥Ñ ú·¥Ä·¥õs „Äç".format(
                    str(len(gethistory)) + " (max)"
                    if len(gethistory) == 5
                    else str(len(gethistory)),
                )
                conn_hist = InlineKeyboardMarkup(buttons)
            elif buttons:
                conn_hist = InlineKeyboardMarkup([buttons])
            else:
                conn_hist = None
            await send_message(
                update.effective_message,
                text,
                parse_mode="markdown",
                reply_markup=conn_hist,
            )

    else:
        getstatusadmin = await context.bot.get_chat_member(
            chat.id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(chat.id)
        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            connection_status = sql.connect(
                update.effective_message.from_user.id,
                chat.id,
            )
            if connection_status:
                chat_obj = await application.bot.getChat(chat.id)
                chat_name = chat_obj.title
                await send_message(
                    update.effective_message,
                    "s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*.".format(chat_name),
                    parse_mode=ParseMode.MARKDOWN,
                )
                try:
                    sql.add_history_conn(user.id, str(chat.id), chat_name)
                    await context.bot.send_message(
                        update.effective_message.from_user.id,
                        " è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \n·¥ús·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.".format(
                            chat_name,
                        ),
                        parse_mode="markdown",
                    )
                except BadRequest:
                    pass
                except Forbidden:
                    pass
            else:
                await send_message(update.effective_message, "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö!")
        else:
            await send_message(
                update.effective_message,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
            )


async def disconnect_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if update.effective_chat.type == "private":
        disconnection_status = sql.disconnect(update.effective_message.from_user.id)
        if disconnection_status:
            sql.disconnected_chat = await send_message(
                update.effective_message,
                "·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ!",
            )
        else:
            await send_message(update.effective_message, " è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!")
    else:
        await send_message(
            update.effective_message, "·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á …™…¥ ·¥ò·¥ç."
        )


async def connected(bot: Bot, update: Update, chat, user_id, need_admin=True):
    user = update.effective_user

    if chat.type == chat.PRIVATE and sql.get_connected_chat(user_id):

        conn_id = sql.get_connected_chat(user_id).chat_id
        getstatusadmin = await bot.get_chat_member(
            conn_id,
            update.effective_message.from_user.id,
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(conn_id)

        if (
            (isadmin)
            or (isallow and ismember)
            or (user.id in DRAGONS)
            or (user.id in DEV_USERS)
        ):
            if need_admin is True:
                if (
                    getstatusadmin.status in ("administrator", "creator")
                    or user_id in DRAGONS
                    or user.id in DEV_USERS
                ):
                    return conn_id
                else:
                    await send_message(
                        update.effective_message,
                        " è·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò!",
                    )
            else:
                return conn_id
        else:
            await send_message(
                update.effective_message,
                "·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ ú·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥  Ä…™…¢ ú·¥õs or  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.\nI'·¥†·¥á ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö  è·¥è·¥ú .",
            )
            disconnect_chat(update, bot)
    else:
        return False


CONN_HELP = """
 ·¥Ä·¥Ñ·¥õ…™·¥è…¥s ·¥Ä Ä·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥°…™·¥õ ú ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥òs:
 ‚Ä¢ View and edit Notes.
 ‚Ä¢ View and edit Filters.
 ‚Ä¢ Get invite link of chat.
 ‚Ä¢ Set and control AntiFlood settings.
 ‚Ä¢ Set and control Blacklist settings.
 ‚Ä¢ Set Locks and Unlocks in chat.
 ‚Ä¢ Enable and Disable commands in chat.
 ‚Ä¢ Export and Imports of chat backup.
 """


async def help_connect_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):

    context.args

    if update.effective_message.chat.type != "private":
        await send_message(
            update.effective_message, "PM me with that command to get help."
        )
        return
    else:
        await send_message(update.effective_message, CONN_HELP, parse_mode="markdown")


async def connect_button(update: Update, context: ContextTypes.DEFAULT_TYPE):

    query = update.callback_query
    chat = update.effective_chat
    user = update.effective_user

    connect_match = re.match(r"connect\((.+?)\)", query.data)
    disconnect_match = query.data == "connect_disconnect"
    clear_match = query.data == "connect_clear"
    connect_close = query.data == "connect_close"

    if connect_match:
        target_chat = connect_match.group(1)
        getstatusadmin = await context.bot.get_chat_member(
            target_chat, query.from_user.id
        )
        isadmin = getstatusadmin.status in ("administrator", "creator")
        ismember = getstatusadmin.status in ("member")
        isallow = sql.allow_connect_to_chat(target_chat)

        if (isadmin) or (isallow and ismember) or (user.id in DRAGONS):
            connection_status = sql.connect(query.from_user.id, target_chat)

            if connection_status:
                conn = await connected(
                    context.bot, update, chat, user.id, need_admin=False
                )
                conn_chat = await application.bot.getChat(conn)
                chat_name = conn_chat.title
                await query.message.edit_text(
                    "s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è *{}*. \n ·¥ç·¥ús·¥á `/helpconnect` ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.".format(
                        chat_name,
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
                sql.add_history_conn(user.id, str(conn_chat.id), chat_name)
            else:
                await query.message.edit_text("Connection failed!")
        else:
            await context.bot.answer_callback_query(
                query.id,
                "·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!",
                show_alert=True,
            )
    elif disconnect_match:
        disconnection_status = sql.disconnect(query.from_user.id)
        if disconnection_status:
            sql.disconnected_chat = await query.message.edit_text(
                "·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ!"
            )
        else:
            await context.bot.answer_callback_query(
                query.id,
                " è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö!",
                show_alert=True,
            )
    elif clear_match:
        sql.clear_history_conn(query.from_user.id)
        await query.message.edit_text(" ú…™s·¥õ·¥è Ä è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ ü·¥á·¥Ä Ä·¥á·¥Ö!")
    elif connect_close:
        await query.message.edit_text("·¥Ñ ü·¥ès·¥á·¥Ö.\n·¥õ·¥è ·¥è·¥ò·¥á…¥ ·¥Ä…¢·¥Ä…™…¥, ·¥õ è·¥ò·¥á /connect")
    else:
        connect_chat(update, context)


__help__ = """
s·¥è·¥ç·¥á·¥õ…™·¥ç·¥ás,  è·¥è·¥ú ·¥ä·¥ús·¥õ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö s·¥è·¥ç·¥á …¥·¥è·¥õ·¥ás ·¥Ä…¥·¥Ö “ì…™ ü·¥õ·¥á Äs ·¥õ·¥è a …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ,  ô·¥ú·¥õ  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥°·¥Ä…¥·¥õ ·¥á·¥†·¥á Ä è·¥è…¥·¥á ·¥õ·¥è s·¥á·¥á; ·¥õ ú…™s …™s ·¥° ú·¥á Ä·¥á ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s ·¥Ñ·¥è·¥ç·¥á …™…¥...
·¥õ ú…™s ·¥Ä ü ü·¥è·¥°s  è·¥è·¥ú ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä·¥õ's ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á, ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s ·¥õ·¥è …™·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä·¥ò·¥ò·¥á·¥Ä Ä…™…¥…¢ …™…¥ ·¥Ñ ú·¥Ä·¥õ! “ì·¥è Ä ·¥è ô·¥†…™·¥è·¥ús  Ä·¥á·¥Äs·¥è…¥s,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥õ ú…™…¥…¢s;  ô·¥ú·¥õ ·¥Ä…¥ è ·¥ç·¥á·¥ç ô·¥á Ä …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ ·¥†…™·¥á·¥°  è·¥è·¥ú Ä ·¥Ö·¥Ä·¥õ·¥Ä.

‚Ä¢ /connect: ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õs ·¥õ·¥è ·¥Ñ ú·¥Ä·¥õ (·¥Ñ·¥Ä…¥  ô·¥á ·¥Ö·¥è…¥·¥á …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò  ô è /connect ·¥è Ä /connect <chat id> …™…¥ ·¥ò·¥ç)
‚Ä¢ /connection:  ü…™s·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs
‚Ä¢ /disconnect: ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ “ì Ä·¥è·¥ç ·¥Ä ·¥Ñ ú·¥Ä·¥õ
‚Ä¢ /helpconnect:  ü…™s·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö  Ä·¥á·¥ç·¥è·¥õ·¥á ü è

*·¥Ä·¥Ö·¥ç…™…¥ ·¥è…¥ ü è:*
‚Ä¢ /allowconnect < è·¥ás/…¥·¥è>: ·¥Ä ü ü·¥è·¥° ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥Ä·¥õ
"""


__mod_name__ = "ùêÇ·¥è…¥…¥·¥á·¥Ñ·¥õ"


CONNECT_CHAT_HANDLER = CommandHandler("connect", connect_chat, block=False)
CONNECTION_CHAT_HANDLER = CommandHandler("connection", connection_chat, block=False)
DISCONNECT_CHAT_HANDLER = CommandHandler("disconnect", disconnect_chat)
ALLOW_CONNECTIONS_HANDLER = CommandHandler(
    "allowconnect", allow_connections, block=False
)
HELP_CONNECT_CHAT_HANDLER = CommandHandler(
    "helpconnect", help_connect_chat, block=False
)
CONNECT_BTN_HANDLER = CallbackQueryHandler(
    connect_button, pattern=r"connect", block=False
)

application.add_handler(CONNECT_CHAT_HANDLER)
application.add_handler(CONNECTION_CHAT_HANDLER)
application.add_handler(DISCONNECT_CHAT_HANDLER)
application.add_handler(ALLOW_CONNECTIONS_HANDLER)
application.add_handler(HELP_CONNECT_CHAT_HANDLER)
application.add_handler(CONNECT_BTN_HANDLER)
