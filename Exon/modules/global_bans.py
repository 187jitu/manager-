import html
import time
from datetime import datetime
from io import BytesIO

from telegram import ChatMemberAdministrator, Update
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden, TelegramError
from telegram.ext import CommandHandler, ContextTypes, MessageHandler, filters
from telegram.helpers import mention_html

import Exon.modules.sql.global_bans_sql as sql
from Exon import (
    DEV_USERS,
    DRAGONS,
    EVENT_LOGS,
    OWNER_ID,
    STRICT_GBAN,
    SUPPORT_CHAT,
    application,
)
from Exon.modules.helper_funcs.chat_status import (
    check_admin,
    is_user_admin,
    support_plus,
)
from Exon.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from Exon.modules.helper_funcs.misc import send_to_list
from Exon.modules.sql.users_sql import get_user_com_chats

GBAN_ENFORCE_GROUP = 6

GBAN_ERRORS = {
    "·¥ús·¥á Ä …™s ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Ä ·¥è“ì ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ",
    "·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö",
    "…¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ/·¥ú…¥ Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥Ñ ú·¥Ä·¥õ ·¥ç·¥á·¥ç ô·¥á Ä",
    "·¥ús·¥á Ä_…¥·¥è·¥õ_·¥ò·¥Ä Ä·¥õ…™·¥Ñ…™·¥ò·¥Ä…¥·¥õ",
    "·¥ò·¥á·¥á Ä_…™·¥Ö_…™…¥·¥†·¥Ä ü…™·¥Ö",
    "…¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ ·¥°·¥Äs ·¥Ö·¥á·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö",
    "…¥·¥á·¥á·¥Ö to be inviter of a user to kick it from a basic group",
    "·¥Ñ ú·¥Ä·¥õ_·¥Ä·¥Ö·¥ç…™…¥_ Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö",
    "·¥è…¥ ü è ·¥õ ú·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ·¥è“ì ·¥Ä  ô·¥Äs…™·¥Ñ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥ ·¥ã…™·¥Ñ·¥ã …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Äs",
    "·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ò Ä…™·¥†·¥Ä·¥õ·¥á",
    "…¥·¥è·¥õ in the chat",
    "·¥Ñ·¥Ä…¥'·¥õ  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ ú·¥Ä·¥õ ·¥è·¥°…¥·¥á Ä",
}

UNGBAN_ERRORS = {
    "·¥ús·¥á Ä …™s ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Ä ·¥è“ì ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ",
    "·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö",
    "…¥·¥è·¥õ ·¥á…¥·¥è·¥ú…¢ ú  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ/·¥ú…¥ Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥Ñ ú·¥Ä·¥õ ·¥ç·¥á·¥ç ô·¥á Ä",
    "·¥ús·¥á Ä_…¥·¥è·¥õ_·¥ò·¥Ä Ä·¥õ…™·¥Ñ…™·¥ò·¥Ä…¥·¥õ",
    "·¥ç·¥á·¥õ ú·¥è·¥Ö …™s ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á “ì·¥è Ä s·¥ú·¥ò·¥á Ä…¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ñ ú·¥Ä·¥õs ·¥è…¥ ü è",
    "…¥·¥è·¥õ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ",
    "·¥Ñ ú·¥Ä…¥…¥·¥á ü_·¥ò Ä…™·¥†·¥Ä·¥õ·¥á",
    "·¥Ñ ú·¥Ä·¥õ_·¥Ä·¥Ö·¥ç…™…¥_ Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö",
    "·¥ò·¥á·¥á Ä_id_…™…¥·¥†·¥Ä ü…™·¥Ö",
    "·¥ús·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö",
}


@support_plus
async def gban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot, args = context.bot, context.args
    message = update.effective_message
    user = update.effective_user
    chat = update.effective_chat
    log_message = ""

    user_id, reason = await extract_user_and_text(message, context, args)

    if not user_id:
        await message.reply_text(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
        )
        return

    if int(user_id) in DEV_USERS:
        await message.reply_text(
            "·¥õ ú·¥Ä·¥õ ·¥ús·¥á Ä …™s ·¥ò·¥Ä Ä·¥õ ·¥è“ì ·¥õ ú·¥á ·¥Äss·¥è·¥Ñ…™·¥Ä·¥õ…™·¥è…¥\nI ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä·¥Ñ·¥õ ·¥Ä…¢·¥Ä…™…¥s·¥õ ·¥è·¥ú Ä ·¥è·¥°…¥.",
        )
        return

    if int(user_id) in DRAGONS:
        await message.reply_text(
            "I s·¥ò è, ·¥°…™·¥õ ú ·¥ç è  ü…™·¥õ·¥õ ü·¥á ·¥á è·¥á... ·¥Ä ·¥Ö…™s·¥Äs·¥õ·¥á Ä! ·¥° ú è ·¥Ä Ä·¥á  è·¥è·¥ú …¢·¥ú ès ·¥õ·¥ú Ä…¥…™…¥…¢ ·¥è…¥ ·¥á·¥Ä·¥Ñ ú ·¥è·¥õ ú·¥á Ä?",
        )
        return

    if user_id == bot.id:
        await message.reply_text(" è·¥è·¥ú ·¥ú ú ú...·¥°·¥Ä…¥·¥õ ·¥ç·¥á ·¥õ·¥è ·¥ã…™·¥Ñ·¥ã ·¥ç ès·¥á ü“ì?")
        return

    if user_id in [777000, 1087968824]:
        await message.reply_text("“ì·¥è·¥è ü!  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥Ä·¥õ·¥õ·¥Ä·¥Ñ·¥ã ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¥·¥Ä·¥õ…™·¥†·¥á ·¥õ·¥á·¥Ñ ú!")
        return

    try:
        user_chat = await bot.get_chat(user_id)
    except BadRequest as excp:
        if excp.message == "User not found":
            await message.reply_text("I ·¥Ñ·¥Ä…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä.")
            return ""
        else:
            return

    if user_chat.type != "private":
        await message.reply_text("·¥õ ú·¥Ä·¥õ's …¥·¥è·¥õ ·¥Ä ·¥ús·¥á Ä!")
        return

    if sql.is_user_gbanned(user_id):

        if not reason:
            await message.reply_text(
                "·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …¢ ô·¥Ä…¥…¥·¥á·¥Ö; …™·¥Ö ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥õ ú·¥á  Ä·¥á·¥Äs·¥è…¥,  ô·¥ú·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ …¢…™·¥†·¥á…¥ ·¥ç·¥á ·¥è…¥·¥á...",
            )
            return

        old_reason = sql.update_gban_reason(
            user_id,
            user_chat.username or user_chat.first_name,
            reason,
        )
        if old_reason:
            await message.reply_text(
                "·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …¢ ô·¥Ä…¥…¥·¥á·¥Ö, “ì·¥è Ä ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢  Ä·¥á·¥Äs·¥è…¥:\n"
                "<code>{}</code>\n"
                "I'·¥†·¥á …¢·¥è…¥·¥á ·¥Ä…¥·¥Ö ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö …™·¥õ ·¥°…™·¥õ ú  è·¥è·¥ú Ä …¥·¥á·¥°  Ä·¥á·¥Äs·¥è…¥!".format(
                    html.escape(old_reason),
                ),
                parse_mode=ParseMode.HTML,
            )

        else:
            await message.reply_text(
                "·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …¢ ô·¥Ä…¥…¥·¥á·¥Ö,  ô·¥ú·¥õ  ú·¥Ä·¥Ö …¥·¥è  Ä·¥á·¥Äs·¥è…¥ s·¥á·¥õ; I'·¥†·¥á …¢·¥è…¥·¥á ·¥Ä…¥·¥Ö ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö …™·¥õ!",
            )

        return

    await message.reply_text("On it!")

    start_time = time.time()
    datetime_fmt = "%Y-%m-%dT%H:%M"
    current_time = datetime.utcnow().strftime(datetime_fmt)

    if chat.type != "private":
        chat_origin = "<b>{} ({})</b>\n".format(html.escape(chat.title), chat.id)
    else:
        chat_origin = "<b>{}</b>\n".format(chat.id)

    log_message = (
        f"#ùêÜùêÅùêÄùêçùêçùêÑùêÉ\n"
        f"<b>·¥è Ä…™…¢…™…¥·¥Ä·¥õ·¥á·¥Ö from:</b> <code>{chat_origin}</code>\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b> ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(user_chat.id, user_chat.first_name)}\n"
        f"<b> ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä …™·¥Ö:</b> <code>{user_chat.id}</code>\n"
        f"<b>·¥á·¥†·¥á…¥·¥õ s·¥õ·¥Ä·¥ç·¥ò:</b> <code>{current_time}</code>"
    )

    if reason:
        if chat.type == chat.SUPERGROUP and chat.username:
            log_message += f'\n<b> Ä·¥á·¥Äs·¥è…¥:</b> <a href="https://telegram.me/{chat.username}/{message.message_id}">{reason}</a>'
        else:
            log_message += f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> <code>{reason}</code>"

    if EVENT_LOGS:
        try:
            log = await bot.send_message(
                EVENT_LOGS, log_message, parse_mode=ParseMode.HTML
            )
        except BadRequest:
            log = await bot.send_message(
                EVENT_LOGS,
                log_message
                + "\n\n“ì·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ä…¥ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä.",
            )

    else:
        send_to_list(bot, DRAGONS, log_message, html=True)

    sql.gban_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_user_com_chats(user_id)
    gbanned_chats = 0

    for chat in chats:
        chat_id = int(chat)

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            await bot.ban_chat_member(chat_id, user_id)
            gbanned_chats += 1

        except BadRequest as excp:
            if excp.message in GBAN_ERRORS:
                pass
            else:
                await message.reply_text(f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …¢ ô·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è: {excp.message}")
                if EVENT_LOGS:
                    await bot.send_message(
                        EVENT_LOGS,
                        f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …¢ ô·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è {excp.message}",
                        parse_mode=ParseMode.HTML,
                    )
                else:
                    send_to_list(
                        bot,
                        DRAGONS,
                        f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ …¢ ô·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è: {excp.message}",
                    )
                sql.ungban_user(user_id)
                return
        except TelegramError:
            pass

    if EVENT_LOGS:
        await log.edit_text(
            log_message + f"\n<b>·¥Ñ ú·¥Ä·¥õs ·¥Ä“ì“ì·¥á·¥Ñ·¥õ·¥á·¥Ö:</b> <code>{gbanned_chats}</code>",
            parse_mode=ParseMode.HTML,
        )
    else:
        send_to_list(
            bot,
            DRAGONS,
            f"…¢ ô·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á! (·¥ús·¥á Ä  ô·¥Ä…¥…¥·¥á·¥Ö …™…¥ <code>{gbanned_chats}</code> ·¥Ñ ú·¥Ä·¥õs)",
            html=True,
        )

    end_time = time.time()
    gban_time = round((end_time - start_time), 2)

    if gban_time > 60:
        gban_time = round((gban_time / 60), 2)
        await message.reply_text("·¥Ö·¥è…¥·¥á! …¢ ô·¥Ä…¥…¥·¥á·¥Ö.", parse_mode=ParseMode.HTML)
    else:
        await message.reply_text("·¥Ö·¥è…¥·¥á! …¢ ô·¥Ä…¥…¥·¥á·¥Ö.", parse_mode=ParseMode.HTML)

    try:
        await bot.send_message(
            user_id,
            "#ùêÑùêïùêÑùêçùêì"
            " è·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥ç·¥Ä Ä·¥ã·¥á·¥Ö ·¥Äs ·¥ç·¥Ä ü…™·¥Ñ…™·¥è·¥ús ·¥Ä…¥·¥Ö ·¥Äs s·¥ú·¥Ñ ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ä…¥ è “ì·¥ú·¥õ·¥ú Ä·¥á …¢ Ä·¥è·¥ú·¥òs ·¥°·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á."
            f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> <code>{html.escape(user.reason)}</code>"
            f"</b>·¥Ä·¥ò·¥ò·¥á·¥Ä ü ·¥Ñ ú·¥Ä·¥õ:</b> @{SUPPORT_CHAT}",
            parse_mode=ParseMode.HTML,
        )
    except:
        pass  # bot probably blocked by user


@support_plus
async def ungban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot, args = context.bot, context.args
    message = update.effective_message
    user = update.effective_user
    chat = update.effective_chat
    log_message = ""

    user_id = await extract_user(message, context, args)

    if not user_id:
        await message.reply_text(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ s·¥á·¥á·¥ç ·¥õ·¥è  ô·¥á  Ä·¥á“ì·¥á Ä Ä…™…¥…¢ ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä ·¥è Ä ·¥õ ú·¥á ID s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö …™s …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ..",
        )
        return

    user_chat = await bot.get_chat(user_id)
    if user_chat.type != "private":
        await message.reply_text("·¥õ ú·¥Ä·¥õ's …¥·¥è·¥õ ·¥Ä ·¥ús·¥á Ä!")
        return

    if not sql.is_user_gbanned(user_id):
        await message.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s …¥·¥è·¥õ …¢ ô·¥Ä…¥…¥·¥á·¥Ö!")
        return

    await message.reply_text(
        f"I' ü ü …¢…™·¥†·¥á {user_chat.first_name} ·¥Ä s·¥á·¥Ñ·¥è…¥·¥Ö ·¥Ñ ú·¥Ä…¥·¥Ñ·¥á, …¢ ü·¥è ô·¥Ä ü ü è."
    )

    start_time = time.time()
    datetime_fmt = "%Y-%m-%dT%H:%M"
    current_time = datetime.utcnow().strftime(datetime_fmt)

    if chat.type != "private":
        chat_origin = f"<b>{html.escape(chat.title)} ({chat.id})</b>\n"
    else:
        chat_origin = f"<b>{chat.id}</b>\n"

    log_message = (
        f"#ùêîùêçùêÜùêÅùêÄùêçùêçùêÑùêÉ\n"
        f"<b>·¥è Ä…™…¢…™…¥·¥Ä·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç:</b> <code>{chat_origin}</code>\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"<b>·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä:</b> {mention_html(user_chat.id, user_chat.first_name)}\n"
        f"<b>·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä ID:</b> <code>{user_chat.id}</code>\n"
        f"<b>·¥á·¥†·¥á…¥·¥õ s·¥õ·¥Ä·¥ç·¥ò:</b> <code>{current_time}</code>"
    )

    if EVENT_LOGS:
        try:
            log = await bot.send_message(
                EVENT_LOGS, log_message, parse_mode=ParseMode.HTML
            )
        except BadRequest:
            log = await bot.send_message(
                EVENT_LOGS,
                log_message
                + "\n\n“ì·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö due ·¥õ·¥è ·¥Ä…¥ ·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä.",
            )
    else:
        send_to_list(bot, DRAGONS, log_message, html=True)

    chats = get_user_com_chats(user_id)
    ungbanned_chats = 0

    for chat in chats:
        chat_id = int(chat)

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            member = await bot.get_chat_member(chat_id, user_id)
            if member.status == "kicked":
                await bot.unban_chat_member(chat_id, user_id)
                ungbanned_chats += 1

        except BadRequest as excp:
            if excp.message in UNGBAN_ERRORS:
                pass
            else:
                await message.reply_text(f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥ú…¥-…¢·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è: {excp.message}")
                if EVENT_LOGS:
                    await bot.send_message(
                        EVENT_LOGS,
                        f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥ú…¥-…¢·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è: {excp.message}",
                        parse_mode=ParseMode.HTML,
                    )
                else:
                    await bot.send_message(
                        OWNER_ID,
                        f"·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥ú…¥-…¢·¥Ä…¥ ·¥Ö·¥ú·¥á ·¥õ·¥è: {excp.message}",
                    )
                return
        except TelegramError:
            pass

    sql.ungban_user(user_id)

    if EVENT_LOGS:
        await log.edit_text(
            log_message + f"\n<b>·¥Ñ ú·¥Ä·¥õs ·¥Ä“ì“ì·¥á·¥Ñ·¥õ·¥á·¥Ö:</b> {ungbanned_chats}",
            parse_mode=ParseMode.HTML,
        )
    else:
        send_to_list(bot, DRAGONS, "·¥ú…¥·¥Ä-…¢ ô·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á!")

    end_time = time.time()
    ungban_time = round((end_time - start_time), 2)

    if ungban_time > 60:
        ungban_time = round((ungban_time / 60), 2)
        await message.reply_text(f"·¥ò·¥á Äs·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥-…¢·¥Ä…¥…¥·¥á·¥Ö. ·¥õ·¥è·¥è·¥ã {ungban_time} ·¥ç…™…¥")
    else:
        await message.reply_text(f"·¥ò·¥á Äs·¥è…¥  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥-…¢·¥Ä…¥…¥·¥á·¥Ö. ·¥õ·¥è·¥è·¥ã {ungban_time} s·¥á·¥Ñ")


@support_plus
async def gbanlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    banned_users = sql.get_gban_list()

    if not banned_users:
        await update.effective_message.reply_text(
            "·¥õ ú·¥á Ä·¥á ·¥Ä Ä·¥á…¥'·¥õ ·¥Ä…¥ è …¢ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs!  è·¥è·¥ú' Ä·¥á ·¥ã…™…¥·¥Ö·¥á Ä ·¥õ ú·¥Ä…¥ I ·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö...",
        )
        return

    banfile = "s·¥Ñ Ä·¥á·¥° ·¥õ ú·¥ás·¥á …¢·¥ú ès.\n"
    for user in banned_users:
        banfile += f"[x] {user['name']} - {user['user_id']}\n"
        if user["reason"]:
            banfile += f" Ä·¥á·¥Äs·¥è…¥: {user['reason']}\n"

    with BytesIO(str.encode(banfile)) as output:
        output.name = "gbanlist.txt"
        await update.effective_message.reply_document(
            document=output,
            filename="gbanlist.txt",
            caption=" ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¢ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs.",
        )


async def check_and_ban(update, user_id, should_message=True):

    if sql.is_user_gbanned(user_id):
        await update.effective_chat.ban_member(user_id)
        if should_message:
            text = (
                f"<b>·¥Ä ü·¥á Ä·¥õ</b>: ·¥õ ú…™s ·¥ús·¥á Ä …™s …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö.\n"
                f"<code>* ô·¥Ä…¥s ·¥õ ú·¥á·¥ç “ì Ä·¥è·¥ç  ú·¥á Ä·¥á*</code>.\n"
                f"<b>·¥Ä·¥ò·¥ò·¥á·¥Ä ü ·¥Ñ ú·¥Ä·¥õ</b>: @{SUPPORT_CHAT}\n"
                f"<b>·¥ús·¥á Ä …™·¥Ö</b>: <code>{user_id}</code>"
            )
            user = sql.get_gbanned_user(user_id)
            if user.reason:
                text += f"\n<b> ô·¥Ä…¥  Ä·¥á·¥Äs·¥è…¥:</b> <code>{html.escape(user.reason)}</code>"
            await update.effective_message.reply_text(text, parse_mode=ParseMode.HTML)


async def enforce_gban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Not using @restrict handler to avoid spamming - just ignore if cant gban.
    bot = context.bot
    try:
        get_member = await update.effective_chat.get_member(
            bot.id,
        )
        if isinstance(get_member, ChatMemberAdministrator):
            restrict_permission = get_member.can_restrict_members
        else:
            return
    except Forbidden:
        return
    if sql.does_chat_gban(update.effective_chat.id) and restrict_permission:
        user = update.effective_user
        chat = update.effective_chat
        msg = update.effective_message

        if user and not await is_user_admin(chat, user.id):
            await check_and_ban(update, user.id)
            return

        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                await check_and_ban(update, mem.id)

        if msg.reply_to_message:
            user = msg.reply_to_message.from_user
            if user and not await is_user_admin(chat, user.id):
                await check_and_ban(update, user.id, should_message=False)


@check_admin(is_user=True)
async def gbanstat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) > 0:
        if args[0].lower() in ["on", "yes"]:
            sql.enable_gbans(update.effective_chat.id)
            await update.effective_message.reply_text(
                "·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö ‚úÖ "
                "I ·¥Ä·¥ç …¥·¥è·¥° ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™…¥…¢  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò “ì Ä·¥è·¥ç ·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü  Ä·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú Ä·¥á·¥Ä·¥õs!",
            )
        elif args[0].lower() in ["off", "no"]:
            sql.disable_gbans(update.effective_chat.id)
            await update.effective_message.reply_text(
                "I ·¥Ä·¥ç …¥·¥è·¥õ …¥·¥è·¥° ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™…¥…¢  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò “ì Ä·¥è·¥ç ·¥ò·¥è·¥õ·¥á…¥·¥õ…™·¥Ä ü  Ä·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú Ä·¥á·¥Ä·¥õs!",
            )
    else:
        await update.effective_message.reply_text(
            "…¢…™·¥†·¥á ·¥ç·¥á s·¥è·¥ç·¥á ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õs ·¥õ·¥è ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä s·¥á·¥õ·¥õ…™…¥…¢! ·¥è…¥/·¥è“ì“ì,  è·¥ás/…¥·¥è!\n\n"
            " è·¥è·¥ú Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢ is: {}\n"
            "·¥° ú·¥á…¥ ·¥õ Ä·¥ú·¥á, ·¥Ä…¥ è …¢ ô·¥Ä…¥s ·¥õ ú·¥Ä·¥õ  ú·¥Ä·¥ò·¥ò·¥á…¥ ·¥°…™ ü ü ·¥Ä üs·¥è  ú·¥Ä·¥ò·¥ò·¥á…¥ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò. "
            "·¥° ú·¥á…¥ “ì·¥Ä üs·¥á, ·¥õ ú·¥á è ·¥°·¥è…¥'·¥õ,  ü·¥á·¥Ä·¥†…™…¥…¢  è·¥è·¥ú ·¥Ä·¥õ ·¥õ ú·¥á ·¥ò·¥èss…™ ô ü·¥á ·¥ç·¥á Ä·¥Ñ è ·¥è“ì "
            "s·¥ò·¥Ä·¥ç·¥ç·¥á Äs.".format(sql.does_chat_gban(update.effective_chat.id)),
        )


def __stats__():
    return f"‚Ä¢ {sql.num_gbanned_users()} …¢ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs."


def __user_info__(user_id):
    is_gbanned = sql.is_user_gbanned(user_id)
    text = "·¥ç·¥Ä ü…™·¥Ñ…™·¥è·¥ús: <b>{}</b>"
    if user_id in [777000, 1087968824]:
        return ""
    if user_id == application.bot.id:
        return ""
    if int(user_id) in DRAGONS:
        return ""
    if is_gbanned:
        text = text.format("Yes")
        user = sql.get_gbanned_user(user_id)
        if user.reason:
            text += f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> <code>{html.escape(user.reason)}</code>"
        text += f"\n<b>·¥Ä·¥ò·¥ò·¥á·¥Ä ü ·¥Ñ ú·¥Ä·¥õ:</b> @{SUPPORT_CHAT}"
    else:
        text = text.format("???")
    return text


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s ·¥á…¥“ì·¥è Ä·¥Ñ…™…¥…¢ *…¢ ô·¥Ä…¥s*: `{sql.does_chat_gban(chat_id)}`."


__help__ = f"""
*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è:*
‚Ä¢ /antispam <·¥è…¥/·¥è“ì“ì/ è·¥ás/…¥·¥è>*:* ·¥°…™ ü ü ·¥õ·¥è…¢…¢ ü·¥á ·¥è·¥ú Ä ·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç ·¥õ·¥á·¥Ñ ú ·¥è Ä  Ä·¥á·¥õ·¥ú Ä…¥  è·¥è·¥ú Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢s.

·¥Ä…¥·¥õ…™-s·¥ò·¥Ä·¥ç, ·¥ús·¥á·¥Ö  ô è  ô·¥è·¥õ ·¥Ö·¥á·¥†s ·¥õ·¥è  ô·¥Ä…¥ s·¥ò·¥Ä·¥ç·¥ç·¥á Äs ·¥Ä·¥Ñ Ä·¥èss ·¥Ä ü ü …¢ Ä·¥è·¥ú·¥òs. ·¥õ ú…™s  ú·¥á ü·¥òs ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ \
 è·¥è·¥ú ·¥Ä…¥·¥Ö  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs  ô è  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ s·¥ò·¥Ä·¥ç “ì ü·¥è·¥è·¥Ö·¥á Äs ·¥Äs «´·¥ú…™·¥Ñ·¥ã ü è ·¥Äs ·¥ò·¥èss…™ ô ü·¥á

*…¥·¥è·¥õ·¥á:* ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥Ä·¥ò·¥ò·¥á·¥Ä ü …¢ ô·¥Ä…¥s ·¥è Ä  Ä·¥á·¥ò·¥è Ä·¥õ s·¥ò·¥Ä·¥ç·¥ç·¥á Äs ·¥Ä·¥õ @{SUPPORT_CHAT}
"""

GBAN_HANDLER = CommandHandler("gban", gban, block=False)
UNGBAN_HANDLER = CommandHandler("ungban", ungban, block=False)
GBAN_LIST = CommandHandler("gbanlist", gbanlist, block=False)

GBAN_STATUS = CommandHandler(
    "antispam", gbanstat, filters=filters.ChatType.GROUPS, block=False
)

GBAN_ENFORCER = MessageHandler(
    filters.ALL & filters.ChatType.GROUPS, enforce_gban, block=False
)

application.add_handler(GBAN_HANDLER)
application.add_handler(UNGBAN_HANDLER)
application.add_handler(GBAN_LIST)
application.add_handler(GBAN_STATUS)

__mod_name__ = "ùêÄ-s·¥ò·¥Ä·¥ç"
__handlers__ = [GBAN_HANDLER, UNGBAN_HANDLER, GBAN_LIST, GBAN_STATUS]

if STRICT_GBAN:  # enforce GBANS if this is set
    application.add_handler(GBAN_ENFORCER, GBAN_ENFORCE_GROUP)
    __handlers__.append((GBAN_ENFORCER, GBAN_ENFORCE_GROUP))
