from GoogleSearch import Search
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.ext import ContextTypes
from bs4 import BeautifulSoup
from Exon import application, register as Asubot
from Exon.modules.disable import DisableAbleCommandHandler
import asyncio
import json
import os
import random
import re
from datetime import datetime


from geniuses import GeniusClient
from gpytranslate import SyncTranslator
from gtts import gTTS
from mutagen.mp3 import MP3
from requests import get, post
from telethon import Button, types
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (
    Channel,
    DocumentAttributeAudio,
    MessageMediaDocument,
    PhotoEmpty,
    User,
)
@Asubot(pattern="^/google ?(.*)")
async def google_search(e):
    try:
        query = e.text.split(None, 1)[1]
    except IndexError:
        return await e.reply(
            "·¥õ ú·¥á «´·¥ú·¥á Ä è ·¥õ·¥áx·¥õ  ú·¥Äs …¥·¥è·¥õ  ô·¥á·¥á…¥ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö.",
        )
    url = f"https://www.google.com/search?&q={query}&num=5"
    usr_agent = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/61.0.3163.100 Safari/537.36"
    }
    r = get(url, headers=usr_agent)
    soup = BeautifulSoup(r.text, "html.parser")
    results = soup.find_all("div", attrs={"class": "g"})
    final = f"s·¥á·¥Ä Ä·¥Ñ ú  Ä·¥ás·¥ú ü·¥õs for <b>{query}</b>:"
    if not results or len(results) == 0:
        return await e.reply(
            "…¥·¥è  Ä·¥ás·¥ú ü·¥õs “ì·¥è·¥ú…¥·¥Ö!",
        )
    for x in results:
        link = (x.find("a", href=True))["href"]
        name = x.find("h3")
        if link and name:
            if not name == "Images" and not name == "Description":
                final += f"\n- <a href='{link}'>{name}</a>"
    await e.reply(final, parse_mode="html", link_preview=False)


@Asubot(pattern="^/lyrics ?(.*)")
async def lyrics_get_(e):
    GENIUSES_API_KEY = (
        "gIgMyTXuwJoY9VCPNwKdb_RUOA_9mCMmRlbrrdODmNvcpslww_2RIbbWOB8YdBW9"
    )
    q = e.pattern_match.group(1)
    if not q:
        return await e.reply(
            "·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á, ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú …™·¥õs  ü è Ä…™·¥Ñs!",
        )
    g_client = GeniusClient(GENIUSES_API_KEY)
    songs = g_client.search(q)
    if len(songs) == 0:
        return await e.reply(
            "…¥·¥è  Ä·¥ás·¥ú ü·¥õ “ì·¥è·¥ú…¥·¥Ö “ì·¥è Ä ·¥õ ú·¥á …¢…™·¥†·¥á…¥ s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á!",
        )
    song = songs[0]
    name = song.title
    song.header_image_thumbnail_url
    lyrics = song.lyrics
    for x in ["Embed", "Share URL", "Copy"]:
        if x in lyrics:
            lyrics = lyrics.replace(x, "")
    pattern = re.compile("\n+")
    lyrics = pattern.sub("\n", lyrics)
    out_str = f"**{name}**\n__{lyrics}__"
    await e.reply(out_str)


kEys = [
    "mHfAkGq8Wi6dHHwt591nMAM7",
    "NSazBmGo6XfkS2LbTNZRiDdK",
    "Ad5bs76jsbssAAnEbx5PtBKe",
    "nDZ4WFe93Hn8Kjz3By8ALR7s",
]


@Asubot(pattern="^/rmbg ?(.*)")
async def remove_bg_photo_room__(e):
    if not e.reply_to:
        return await e.reply(
            " Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á …™·¥õ's  ô·¥Ä·¥Ñ·¥ã…¢ Ä·¥è·¥ú…¥·¥Ö.",
        )
    r = await e.get_reply_message()
    if not r.photo and not r.sticker:
        return await e.reply(
            "·¥õ ú·¥Ä·¥õ's …¥·¥è·¥õ ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä/…™·¥ç·¥Ä…¢·¥á ·¥õ·¥è remove.bg",
        )
    mxe = await e.reply(
        "` Ä·¥á·¥ç·¥è·¥†…™…¥…¢  ô…¢....`",
    )
    f = await e.client.download_media(r)
    r = post(
        "https://api.remove.bg/v1.0/removebg",
        files={"image_file": open(f, "rb")},
        data={"size": "auto"},
        headers={"X-Api-Key": random.choice(kEys)},
    )
    if r.ok:
        with open("rmbg.jpg", "wb") as w:
            w.write(r.content)
        await e.reply(file="rmbg.jpg", force_document=True)
        await mxe.delete()
    else:
        await e.reply(r.text)
    os.remove(f)
    

async def reverse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    args = context.args

    if args:
        if len(args) <= 1:
            url = args[0]
            if url.startswith(("https://", "http://")):
                msg = await message.reply_text("·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ú Ä ü ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á..")

                result = Search(url=url)
                name = result["output"]
                link = result["similar"]

                await msg.edit_text("·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á, “ì·¥á·¥õ·¥Ñ ú…™…¥…¢  Ä·¥ás·¥ú ü·¥õs...")
                await msg.edit_text(
                    text=f"{name}",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    text="s…™·¥ç…™ ü·¥Ä Ä",
                                    url=link,
                                ),
                            ],
                        ],
                    ),
                )
                return
        else:
            await message.reply_text(
                "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ç·¥ús·¥õ  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á ·¥è Ä s ú·¥è·¥ú ü·¥Ö …¢…™·¥†·¥á ·¥ú Ä ü"
            )

    elif message.reply_to_message and message.reply_to_message.photo:
        try:
            edit = await message.reply_text("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ …™·¥ç·¥Ä…¢·¥á")
        except BadRequest:
            return

        photo = message.reply_to_message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        await file.download_to_drive("reverse.jpg")

        await edit.edit_text("·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™·¥ç·¥Ä…¢·¥á, ·¥ú·¥ò ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á...")

        result = Search(file_path="reverse.jpg")
        await edit.edit_text("·¥ú·¥ò ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á, “ì·¥á·¥õ·¥Ñ ú…™…¥…¢  Ä·¥ás·¥ú ü·¥õs...")
        name = result["output"]
        link = result["similar"]

        await edit.edit_text(
            text=f"{name}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s…™·¥ç…™ ü·¥Ä Ä",
                            url=link,
                        ),
                    ],
                ],
            ),
        )
        return
    else:
        await message.reply_text(
            "·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö s ú·¥è·¥ú ü·¥Ö  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á ·¥è Ä ·¥ú Ä ü s ú·¥è·¥ú ü·¥Ö …¢…™·¥†·¥á…¥."
        )


REVERSE_HANDLER = DisableAbleCommandHandler(["reverse", "pp"], reverse, block=False)
application.add_handler(REVERSE_HANDLER)

__help__ = """
‚çü /google `<«´·¥ú·¥á Ä è>`: ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥Ä …¢·¥è·¥è…¢ ü·¥á s·¥á·¥Ä Ä·¥Ñ ú ·¥°…™·¥õ ú ·¥õ ú·¥á …¢…™·¥†·¥á…¥ «´·¥ú·¥á Ä è.
‚çü /lyrics `<«´·¥ú·¥á Ä è>`: …¢·¥Ä·¥õ ú·¥á Ä ·¥õ ú·¥á  ü è Ä…™·¥Ñs ·¥è“ì ·¥õ ú·¥á «´·¥ú·¥á Ä…™·¥á·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç  ü è Ä…™·¥Ñs…¢·¥á…¥…™·¥ús.
‚çü /rmbg `< Ä·¥á·¥ò ü è>`:  Ä·¥á·¥ç·¥è·¥†·¥á  ô…¢ ·¥è“ì ·¥õ ú·¥á …™·¥ç·¥Ä…¢·¥á ·¥ús…™…¥…¢ `remove.bg` ·¥Ä·¥ò…™
 Ä·¥á·¥†·¥á Äs·¥á s·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¥ è …™·¥ç·¥Ä…¢·¥á ·¥ús…™…¥…¢ …¢·¥è·¥è…¢ ü·¥á …™·¥ç·¥Ä…¢·¥á s·¥á·¥Ä Ä·¥Ñ ú.

*·¥ús·¥Ä…¢·¥á:*
‚çü s·¥á…¥·¥Ö…™…¥…¢ /reverse  ô è  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥Ä…¥ è …™·¥ç·¥Ä…¢·¥á
‚çü /reverse ·¥õ ú·¥á…¥ ·¥ú Ä ü 
"""

__mod_name__ = "ùêÜ·¥è·¥è…¢ ü·¥á"
