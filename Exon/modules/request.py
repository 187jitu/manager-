import html

from telegram import Update
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden
from telegram.ext import CommandHandler, ContextTypes, MessageHandler, filters
from telegram.helpers import mention_html

from Exon import LOGGER, application
from Exon.modules.helper_funcs.chat_status import check_admin, user_not_admin
from Exon.modules.log_channel import loggable
from Exon.modules.sql import request_sql as sql

REQUEST_GROUP = 12


@check_admin(is_user=True)
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    chat = update.effective_chat
    user = update.effective_user
    args = context.args

    if chat.type == chat.PRIVATE:
        if len(args) >= 1:
            if args[0] in ["yes", "on"]:
                sql.set_user_setting(user.id, True)
                await message.reply_text(
                    "s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è s·¥á·¥õ  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥õ·¥è ·¥õ Ä·¥ú·¥á\n è·¥è·¥ú ·¥°…™ ü ü …¥·¥è·¥°  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á«´·¥ú·¥ás·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õs  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
                )
            elif args[0] in ["no", "off"]:
                sql.set_user_setting(user.id, False)
                await message.reply_text(
                    "s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è s·¥á·¥õ  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥õ·¥è “ì·¥Ä üs·¥á\n è·¥è·¥ú ·¥°…™ ü ü …¥·¥è·¥õ  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á«´·¥ú·¥ás·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õs  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
                )
        else:
            await message.reply_text(
                f"·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á: <code>{sql.user_should_request(user.id)}</code>",
                parse_mode="html",
            )

    else:
        if len(args) >= 1:
            if args[0] in ["yes", "on"]:
                sql.set_chat_setting(chat.id, True)
                await message.reply_text(
                    f" Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢  ú·¥Äs s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è…¥ …™…¥ {chat.title} \n…¥·¥è·¥° users ·¥Ñ·¥Ä…¥  Ä·¥á«´·¥ú·¥ás·¥õ  ô è /request ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
                )
            elif args[0] in ["no", "off"]:
                sql.set_chat_setting(chat.id, False)
                await message.reply_text(
                    f" Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢ …™s …¥·¥è·¥° ·¥õ·¥ú Ä…¥·¥á·¥Ö ·¥è“ì“ì …™…¥ {chat.title}"
                )
        else:
            await message.reply_text(
                f"·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Ä·¥á«´·¥ú·¥ás·¥õ  ú·¥Ä…¥·¥Ö ü…™…¥…¢ ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á: <code>{sql.chat_should_request(chat.id)}</code>",
                parse_mode="html",
            )


@loggable
@user_not_admin
async def request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    chat = update.effective_chat
    user = update.effective_user
    args = context.args
    bot = context.bot

    if chat and sql.chat_should_request(chat.id):
        chat_name = chat.title or chat.username or chat.first_name
        admin_list = await chat.get_administrators()

        if not args:
            await message.reply_text("Please give something to request")
            return ""

        if chat.type == chat.SUPERGROUP:
            request = message.text
            msg = (
                f"<b>‚ö†Ô∏è  Ä·¥á«´·¥ú·¥ás·¥õ: </b>{html.escape(chat.title)}\n"
                f"<b> ‚Ä¢  Ä·¥á«´·¥ú·¥ás·¥õ by:</b> {mention_html(user.id, user.first_name)} | <code>{user.id}</code>\n"
                f"<b> ‚Ä¢ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ:</b> <code>{request}</code>\n"
            )
            link = f'<b> ‚Ä¢  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á:</b> <a href="https://t.me/{chat.username}/{message.message_id}">·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á</a>'
            should_forward = False
        else:
            link = ""
            should_forward = True
            msg = f'{mention_html(user.id, user.first_name)} …™s  Ä·¥á«´·¥ú·¥ás·¥õ…™…¥…¢ s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ …™…¥ "{html.escape(chat_name)}"'

        for admin in admin_list:
            if admin.user.is_bot:
                continue

            if sql.user_should_request(admin.user.id):
                try:
                    if not chat.type == chat.SUPERGROUP:
                        await bot.send_message(
                            admin.user.id,
                            msg + link,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=True,
                        )

                        if should_forward:
                            await message.forward(admin.user.id)

                    if not chat.username:
                        await bot.send_message(
                            admin.user.id,
                            msg + link,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=True,
                        )

                        if should_forward:
                            await message.forward(admin.user.id)

                    if chat.username and chat.type == chat.SUPERGROUP:

                        await bot.send_message(
                            admin.user.id,
                            msg + link,
                            parse_mode=ParseMode.HTML,
                            disable_web_page_preview=True,
                        )

                        if should_forward:
                            await message.forward(admin.user.id)

                except Forbidden:
                    pass
                except BadRequest:
                    LOGGER.exception("·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥ ·¥° ú…™ ü·¥á  Ä·¥á«´·¥ú·¥ás·¥õ…™…¥…¢ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ!")

        await message.reply_text(
            f"{mention_html(user.id, user.first_name)} I'·¥†·¥á s·¥ú ô·¥ç…™·¥õ·¥õ·¥á·¥Ö  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s.",
            parse_mode=ParseMode.HTML,
        )
        return msg

    return ""


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, _):
    return f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s s·¥á·¥õ·¥ú·¥ò ·¥õ·¥è s·¥á…¥·¥Ö ·¥ús·¥á Ä  Ä·¥á·¥ò·¥è Ä·¥õs ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s, ·¥†…™·¥Ä /request ·¥Ä…¥·¥Ö #request: `{sql.chat_should_request(chat_id)}`"


def __user_settings__(user_id):
    if sql.user_should_request(user_id) is True:
        text = " è·¥è·¥ú ·¥°…™ ü ü  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á«´·¥ú·¥ás·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ's  è·¥è·¥ú' Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
    else:
        text = " è·¥è·¥ú ·¥°…™ ü ü *…¥·¥è·¥õ*  Ä·¥á·¥Ñ·¥á…™·¥†·¥á  Ä·¥á«´·¥ú·¥ás·¥õs “ì Ä·¥è·¥ç ·¥Ñ ú·¥Ä·¥õ's  è·¥è·¥ú' Ä·¥á ·¥Ä·¥Ö·¥ç…™…¥."
    return text


SETTINGS_HANDLER = CommandHandler("requests", settings, block=False)
REQUEST_HANDLER = CommandHandler(
    "request", request, filters=filters.ChatType.GROUPS, block=False
)
HASH_REQUEST_HANDLER = MessageHandler(
    filters.Regex(r"(?i)#request(s)?"), request, block=False
)


application.add_handler(SETTINGS_HANDLER)
application.add_handler(REQUEST_HANDLER, REQUEST_GROUP)
application.add_handler(HASH_REQUEST_HANDLER)

__mod_name__ = "ùêë·¥á«´·¥ú·¥ás·¥õ"
__help__ = """
‚Ä¢ /request <·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ>*:*   Ä·¥á«´·¥ú·¥ás·¥õ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥s.

*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è:*
 ‚Ä¢ /requests <on/off>*:* ·¥Ñ ú·¥Ä…¥…¢·¥á  Ä·¥á«´·¥ú·¥ás·¥õ s·¥á·¥õ·¥õ…™…¥…¢, ·¥è Ä ·¥†…™·¥á·¥° ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õ·¥ús.
   ‚Ä¢ …™“ì ·¥Ö·¥è…¥·¥á …™…¥ ·¥ò·¥ç, ·¥õ·¥è…¢…¢ ü·¥ás  è·¥è·¥ú Ä s·¥õ·¥Ä·¥õ·¥ús.
   ‚Ä¢ …™“ì …™…¥ …¢ Ä·¥è·¥ú·¥ò, ·¥õ·¥è…¢…¢ ü·¥ás ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò's s·¥õ·¥Ä·¥õ·¥ús.
"""

__handlers__ = [
    (REQUEST_HANDLER, REQUEST_GROUP),
    (SETTINGS_HANDLER),
]
