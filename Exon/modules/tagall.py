import asyncio

from telethon import events
from telethon.errors import UserNotParticipantError
from telethon.tl.functions.channels import GetParticipantRequest
from telethon.tl.types import ChannelParticipantAdmin, ChannelParticipantCreator

from Exon import telethn as abishnoi

spam_chats = []


@abishnoi.on(events.NewMessage(pattern="^/tagall ?(.*)"))
@abishnoi.on(events.NewMessage(pattern="^@all ?(.*)"))
async def mentionall(event):
    chat_id = event.chat_id
    if event.is_private:
        return await event.respond("__·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á …™…¥ …¢ Ä·¥è·¥ú·¥òs !__")

    is_admin = False
    try:
        partici_ = await abishnoi(GetParticipantRequest(event.chat_id, event.sender_id))
    except UserNotParticipantError:
        is_admin = False
    else:
        if isinstance(
            partici_.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)
        ):
            is_admin = True
    if not is_admin:
        return await event.respond("__·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥Ä ü ü !__")

    if event.pattern_match.group(1) and event.is_reply:
        return await event.respond("__…¢…™·¥†·¥á ·¥ç·¥á ·¥è…¥·¥á ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õ  ô·¥Ä ô è!__")
    elif event.pattern_match.group(1):
        mode = "text_on_cmd"
        msg = event.pattern_match.group(1)
    elif event.is_reply:
        mode = "text_on_reply"
        msg = await event.get_reply_message()
        if msg == None:
            return await event.respond(
                "__I ·¥Ñ·¥Ä…¥'·¥õ ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥ç·¥á·¥ç ô·¥á Äs “ì·¥è Ä ·¥è ü·¥Ö·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥ás! (·¥ç·¥áss·¥Ä…¢·¥ás ·¥° ú…™·¥Ñ ú ·¥Ä Ä·¥á s·¥á…¥·¥õ  ô·¥á“ì·¥è Ä·¥á I'·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò)__"
            )
    else:
        return await event.respond(
            "__ Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä …¢…™·¥†·¥á ·¥ç·¥á s·¥è·¥ç·¥á ·¥õ·¥áx·¥õ ·¥õ·¥è ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥è·¥õ ú·¥á Äs!__"
        )

    spam_chats.append(chat_id)
    usrnum = 0
    usrtxt = ""
    async for usr in abishnoi.iter_participants(chat_id):
        if not chat_id in spam_chats:
            break
        usrnum += 1
        usrtxt += f"[{usr.first_name}](tg://user?id={usr.id}), "
        if usrnum == 5:
            if mode == "text_on_cmd":
                txt = f"{msg}\n{usrtxt}"
                await abishnoi.send_message(chat_id, txt)
            elif mode == "text_on_reply":
                await msg.reply(usrtxt)
            await asyncio.sleep(3)
            usrnum = 0
            usrtxt = ""
    try:
        spam_chats.remove(chat_id)
    except:
        pass


@abishnoi.on(events.NewMessage(pattern="^/cancel$"))
async def cancel_spam(event):
    if not event.chat_id in spam_chats:
        return await event.respond("__·¥õ ú·¥á Ä·¥á …™s …¥·¥è ·¥ò Ä·¥è·¥Ñ·¥Ñ·¥áss ·¥è…¥ …¢·¥è…™…¥…¢...__")
    is_admin = False
    try:
        partici_ = await abishnoi(GetParticipantRequest(event.chat_id, event.sender_id))
    except UserNotParticipantError:
        is_admin = False
    else:
        if isinstance(
            partici_.participant, (ChannelParticipantAdmin, ChannelParticipantCreator)
        ):
            is_admin = True
    if not is_admin:
        return await event.respond("__·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!__")

    else:
        try:
            spam_chats.remove(event.chat_id)
        except:
            pass
        return await event.respond("__s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ·¥ç·¥á…¥·¥õ…™·¥è…¥.__")


__mod_name__ = "ùêì·¥Ä…¢-A ü ü"
__help__ = """
*·¥è…¥ ü è “ì·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥s*

‚ùç /tagall or @all *:*  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä ·¥Ä·¥Ö·¥Ö ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Äs …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥.
‚ùç /cancel *:* s·¥õ·¥è·¥ò ·¥ç·¥á…¥·¥õ…™·¥è…¥·¥á·¥Ö
"""
