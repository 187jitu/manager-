import html
import random
import re
import time
from contextlib import suppress
from functools import partial

from telegram import ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup, Update

# from Exon.modules.sql.topics_sql import get_action_topic
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telegram.helpers import escape_markdown, mention_html, mention_markdown

import Exon
import Exon.modules.sql.welcome_sql as sql
from Exon import DEV_USERS, DRAGONS, EVENT_LOGS, LOGGER, OWNER_ID, application
from Exon.modules.helper_funcs.chat_status import check_admin, is_user_ban_protected
from Exon.modules.helper_funcs.misc import build_keyboard, revert_buttons
from Exon.modules.helper_funcs.msg_types import get_welcome_type
from Exon.modules.helper_funcs.string_handling import (
    escape_invalid_curly_brackets,
    markdown_parser,
    markdown_to_html,
)
from Exon.modules.log_channel import loggable
from Exon.modules.sql.global_bans_sql import is_user_gbanned

VALID_WELCOME_FORMATTERS = [
    "first",
    "last",
    "fullname",
    "username",
    "id",
    "count",
    "chatname",
    "mention",
]

ENUM_FUNC_MAP = {
    sql.Types.TEXT.value: application.bot.send_message,
    sql.Types.BUTTON_TEXT.value: application.bot.send_message,
    sql.Types.STICKER.value: application.bot.send_sticker,
    sql.Types.DOCUMENT.value: application.bot.send_document,
    sql.Types.PHOTO.value: application.bot.send_photo,
    sql.Types.AUDIO.value: application.bot.send_audio,
    sql.Types.VOICE.value: application.bot.send_voice,
    sql.Types.VIDEO.value: application.bot.send_video,
}

VERIFIED_USER_WAITLIST = {}


# do not async
async def send(update: Update, message, keyboard, backup_message):
    chat = update.effective_chat
    cleanserv = sql.clean_service(chat.id)
    reply = update.effective_message.message_id
    # topic_chat = get_action_topic(chat.id)
    # Clean service welcome
    if cleanserv:
        try:
            await application.bot.delete_message(chat.id, update.message.message_id)
        except BadRequest:
            pass
        reply = False
    try:
        try:
            msg = await application.bot.send_message(
                chat.id,
                markdown_to_html(message),
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
            )
        except:
            msg = await update.effective_message.reply_text(
                markdown_to_html(message),
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                reply_to_message_id=reply,
            )
    except BadRequest as excp:
        if excp.message == " Ä·¥á·¥ò ü è ·¥ç·¥áss·¥Ä…¢·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö":
            msg = await update.effective_message.reply_text(
                markdown_to_html(message),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard,
                quote=False,
            )
        elif excp.message == "Button_url_invalid":
            try:
                msg = await application.bot.send_message(
                    chat.id,
                    markdown_parser(
                        backup_message
                        + "\n…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ú Ä ü "
                        "…™…¥ ·¥è…¥·¥á ·¥è“ì …™·¥õs  ô·¥ú·¥õ·¥õ·¥è…¥s. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
            except:
                msg = await update.effective_message.reply_text(
                    markdown_parser(
                        backup_message
                        + "\…¥…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ú Ä ü "
                        "…™…¥ ·¥è…¥·¥á ·¥è“ì …™·¥õs  ô·¥ú·¥õ·¥õ·¥è…¥s. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_to_message_id=reply,
                )
        elif excp.message == "·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ú Ä ü ·¥ò Ä·¥è·¥õ·¥è·¥Ñ·¥è ü":
            try:
                msg = await application.bot.send_message(
                    chat.id,
                    markdown_parser(
                        backup_message
                        + "\n…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥° ú…™·¥Ñ ú "
                        "·¥ús·¥á ·¥ú Ä ü ·¥ò Ä·¥è·¥õ·¥è·¥Ñ·¥è üs ·¥õ ú·¥Ä·¥õ ·¥Ä Ä·¥á ·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è "
                        "·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
            except:
                msg = await update.effective_message.reply_text(
                    markdown_parser(
                        backup_message
                        + "\n…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥° ú…™·¥Ñ ú "
                        "·¥ús·¥á ·¥ú Ä ü ·¥ò Ä·¥è·¥õ·¥è·¥Ñ·¥è üs ·¥õ ú·¥Ä·¥õ ·¥Ä Ä·¥á ·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö  ô è "
                        "·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_to_message_id=reply,
                )
        elif excp.message == "·¥° Ä·¥è…¥…¢ ·¥ú Ä ü  ú·¥ès·¥õ":
            try:
                msg = await application.bot.send_message(
                    chat.id,
                    markdown_parser(
                        backup_message
                        + "\n…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs s·¥è·¥ç·¥á  ô·¥Ä·¥Ö ·¥ú Ä üs. "
                        "·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
            except:
                msg = await update.effective_message.reply_text(
                    markdown_parser(
                        backup_message
                        + "\n…¥·¥è·¥õ·¥á: ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs s·¥è·¥ç·¥á  ô·¥Ä·¥Ö ·¥ú Ä üs. "
                        "·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_to_message_id=reply,
                )
            LOGGER.warning(message)
            LOGGER.warning(keyboard)
            LOGGER.exception("·¥Ñ·¥è·¥ú ü·¥Ö …¥·¥è·¥õ ·¥ò·¥Ä Äs·¥á! …¢·¥è·¥õ …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ú Ä ü  ú·¥ès·¥õ ·¥á Ä Ä·¥è Äs")
        elif excp.message == " ú·¥Ä·¥†·¥á …¥·¥è  Ä…™…¢ ú·¥õs ·¥õ·¥è s·¥á…¥·¥Ö ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á":
            return
        else:
            try:
                msg = await application.bot.send_message(
                    chat.id,
                    markdown_parser(
                        backup_message + "\n…¥·¥è·¥õ·¥á: ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú·¥á…¥ s·¥á…¥·¥Ö…™…¥…¢ ·¥õ ú·¥á "
                        "·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥ç·¥áss·¥Ä…¢·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                )
            except:
                msg = await update.effective_message.reply_text(
                    markdown_parser(
                        backup_message + "\n…¥·¥è·¥õ·¥á: ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú·¥á…¥ s·¥á…¥·¥Ö…™…¥…¢ ·¥õ ú·¥á "
                        "·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥ç·¥áss·¥Ä…¢·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á.",
                    ),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_to_message_id=reply,
                )
            LOGGER.exception()
    return msg


@loggable
async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot, job_queue = context.bot, context.job_queue
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message

    # topic_chat = get_action_topic(chat.id)

    should_welc, cust_welcome, cust_content, welc_type = sql.get_welc_pref(chat.id)
    welc_mutes = sql.welcome_mutes(chat.id)
    human_checks = sql.get_human_checks(user.id, chat.id)

    new_members = update.effective_message.new_chat_members

    for new_mem in new_members:

        if new_mem.id == bot.id and not Exon.ALLOW_CHATS:
            with suppress(BadRequest):
                await update.effective_message.reply_text(
                    f"…¢ Ä·¥è·¥ú·¥òs ·¥Ä Ä·¥á ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö “ì·¥è Ä {bot.first_name}, …™'·¥ç ·¥è·¥ú·¥õ·¥õ·¥Ä  ú·¥á Ä·¥á."
                )
            await bot.leave_chat(update.effective_chat.id)
            return

        welcome_log = None
        res = None
        sent = None
        should_mute = True
        welcome_bool = True
        media_wel = False

        if is_user_gbanned(new_mem.id):
            return

        if should_welc:

            reply = update.message.message_id
            cleanserv = sql.clean_service(chat.id)
            # Clean service welcome
            if cleanserv:
                try:
                    await application.bot.delete_message(
                        chat.id, update.message.message_id
                    )
                except BadRequest:
                    pass
                reply = False

            # Give the owner a special welcome
            if new_mem.id == OWNER_ID:
                await update.effective_message.reply_text(
                    "·¥è ú, ·¥Ö·¥Ä Ä ü…™…¥…¢ …™  ú·¥Ä·¥†·¥á s·¥á·¥Ä Ä·¥Ñ ú·¥á·¥Ö “ì·¥è Ä  è·¥è·¥ú ·¥á·¥†·¥á Ä è·¥° ú·¥á Ä·¥á",
                    reply_to_message_id=reply,
                )
                welcome_log = (
                    f"{html.escape(chat.title)}\n"
                    f"#ùêîùêíùêÑùêë_ùêâùêéùêàùêçùêÑùêÉ\n"
                    f" ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò"
                )
                continue

            # Welcome Devs
            elif new_mem.id in DEV_USERS:
                await update.effective_message.reply_text(
                    " ô·¥á ·¥Ñ·¥è·¥è ü! ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä ·¥è“ì ·¥õ ú·¥á ·¥õ·¥á·¥Ä·¥ç ·¥Ä ô…™s ú…¥·¥è…™ ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö.",
                    reply_to_message_id=reply,
                )
                welcome_log = (
                    f"{html.escape(chat.title)}\n"
                    f"#ùêîùêíùêÑùêë_ùêâùêéùêàùêçùêÑùêÉ\n"
                    f" ô·¥è·¥õ ·¥Ö·¥á·¥† ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò"
                )
                continue

            # Welcome Sudos
            elif new_mem.id in DRAGONS:
                await update.effective_message.reply_text(
                    "·¥° ú·¥è·¥Ä! ·¥Ä ·¥Ö Ä·¥Ä…¢·¥è…¥ ·¥Ö…™s·¥Äs·¥õ·¥á Ä ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö! s·¥õ·¥Ä è ·¥Ä ü·¥á Ä·¥õ !",
                    reply_to_message_id=reply,
                )
                welcome_log = (
                    f"{html.escape(chat.title)}\n"
                    f"#ùêîùêíùêÑùêë_ùêâùêéùêàùêçùêÑùêÉ\n"
                    f" ô·¥è·¥õ s·¥ú·¥Ö·¥è ·¥ä·¥ús·¥õ ·¥ä·¥è…™…¥·¥á·¥Ö ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò"
                )
                continue

            # ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á  è·¥è·¥ú Äs·¥á ü“ì
            elif new_mem.id == bot.id:
                creator = None
                for x in await bot.get_chat_administrators(update.effective_chat.id):
                    if x.status == "creator":
                        creator = x.user
                        break
                if creator:
                    reply = f"""#ùêçùêÑùêñùêÜùêëùêéùêîùêè \
                        \n…™·¥Ö:   `{chat.id}` \
                    """

                    if chat.title:
                        reply += f"\n…¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á:   **{escape_markdown(chat.title)}**"

                    if chat.username:
                        reply += f"\n·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á: @{escape_markdown(chat.username)}"

                    reply += f"\n·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä …™·¥Ö:   `{creator.id}`"

                    if creator.username:
                        reply += f"\n·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á: @{creator.username}"

                    await bot.send_message(
                        EVENT_LOGS,
                        reply,
                        parse_mode="markdown",
                    )
                else:
                    await bot.send_message(
                        EVENT_LOGS,
                        "#ùêçùêÑùêñ_ùêÜùêëùêéùêîùêè\n<b>…¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á:</b> {}\n<b>…™·¥Ö:</b> <code>{}</code>".format(
                            html.escape(chat.title),
                            chat.id,
                        ),
                        parse_mode=ParseMode.HTML,
                    )
                await update.effective_message.reply_text(
                    "I “ì·¥á·¥á ü  ü…™·¥ã·¥á I'·¥ç …¢·¥è…¥…¥·¥Ä s·¥ú“ì“ì·¥è·¥Ñ·¥Ä·¥õ·¥á …™…¥  ú·¥á Ä·¥á.",
                    reply_to_message_id=reply,
                )
                continue

            else:
                buttons = sql.get_welc_buttons(chat.id)
                keyb = build_keyboard(buttons)

                if welc_type not in (sql.Types.TEXT, sql.Types.BUTTON_TEXT):
                    media_wel = True

                first_name = (
                    new_mem.first_name or "PersonWithNoName"
                )  # edge case of empty name - occurs for some bugs.

                if cust_welcome:
                    if cust_welcome == sql.DEFAULT_WELCOME:
                        cust_welcome = random.choice(
                            sql.DEFAULT_WELCOME_MESSAGES,
                        ).format(first=escape_markdown(first_name))

                    if new_mem.last_name:
                        fullname = escape_markdown(f"{first_name} {new_mem.last_name}")
                    else:
                        fullname = escape_markdown(first_name)
                    count = await chat.get_member_count()
                    mention = mention_markdown(new_mem.id, escape_markdown(first_name))
                    if new_mem.username:
                        username = "@" + escape_markdown(new_mem.username)
                    else:
                        username = mention

                    valid_format = escape_invalid_curly_brackets(
                        cust_welcome,
                        VALID_WELCOME_FORMATTERS,
                    )
                    res = valid_format.format(
                        first=escape_markdown(first_name),
                        last=escape_markdown(new_mem.last_name or first_name),
                        fullname=escape_markdown(fullname),
                        username=username,
                        mention=mention,
                        count=count,
                        chatname=escape_markdown(chat.title),
                        id=new_mem.id,
                    )

                else:
                    res = random.choice(sql.DEFAULT_WELCOME_MESSAGES).format(
                        first=escape_markdown(first_name),
                    )
                    keyb = []

                backup_message = random.choice(sql.DEFAULT_WELCOME_MESSAGES).format(
                    first=escape_markdown(first_name),
                )
                keyboard = InlineKeyboardMarkup(keyb)

        else:
            welcome_bool = False
            res = None
            keyboard = None
            backup_message = None
            reply = None

        # User exceptions from welcomemutes
        if (
            await is_user_ban_protected(
                chat, new_mem.id, await chat.get_member(new_mem.id)
            )
            or human_checks
        ):
            should_mute = False
        # Join welcome: soft mute
        if new_mem.is_bot:
            should_mute = False

        if user.id == new_mem.id:
            if should_mute:
                if welc_mutes == "soft":
                    await bot.restrict_chat_member(
                        chat.id,
                        new_mem.id,
                        permissions=ChatPermissions(
                            can_send_messages=True,
                            can_send_media_messages=False,
                            can_send_other_messages=False,
                            can_invite_users=False,
                            can_pin_messages=False,
                            can_send_polls=False,
                            can_change_info=False,
                            can_add_web_page_previews=False,
                            can_manage_topics=False,
                        ),
                        until_date=(int(time.time() + 24 * 60 * 60)),
                    )
                if welc_mutes == "strong":
                    welcome_bool = False
                    if not media_wel:
                        VERIFIED_USER_WAITLIST.update(
                            {
                                new_mem.id: {
                                    "should_welc": should_welc,
                                    "media_wel": False,
                                    "status": False,
                                    "update": update,
                                    "res": res,
                                    "keyboard": keyboard,
                                    "backup_message": backup_message,
                                },
                            },
                        )
                    else:
                        VERIFIED_USER_WAITLIST.update(
                            {
                                new_mem.id: {
                                    "should_welc": should_welc,
                                    "chat_id": chat.id,
                                    "status": False,
                                    "media_wel": True,
                                    "cust_content": cust_content,
                                    "welc_type": welc_type,
                                    "res": res,
                                    "keyboard": keyboard,
                                },
                            },
                        )
                    new_join_mem = f'<a href="tg://user?id={user.id}">{html.escape(new_mem.first_name)}</a>'
                    message = await msg.reply_text(
                        f"{new_join_mem}, ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ò Ä·¥è·¥†·¥á  è·¥è·¥ú' Ä·¥á  ú·¥ú·¥ç·¥Ä…¥.\n è·¥è·¥ú  ú·¥Ä·¥†·¥á 120 s·¥á·¥Ñ·¥è…¥·¥Ös ·¥è…¥ ü è.",
                        reply_markup=InlineKeyboardMarkup(
                            [
                                [
                                    InlineKeyboardButton(
                                        text="üë©‚Äçüíº  è·¥ás, I'·¥ç  ú·¥ú·¥ç·¥Ä…¥ üë®‚Äçüíº.",
                                        callback_data=f"user_join_({new_mem.id})",
                                    ),
                                ],
                            ],
                        ),
                        parse_mode=ParseMode.HTML,
                        reply_to_message_id=reply,
                    )
                    await bot.restrict_chat_member(
                        chat.id,
                        new_mem.id,
                        permissions=ChatPermissions(
                            can_send_messages=False,
                            can_invite_users=False,
                            can_pin_messages=False,
                            can_send_polls=False,
                            can_change_info=False,
                            can_send_media_messages=False,
                            can_send_other_messages=False,
                            can_add_web_page_previews=False,
                            can_manage_topics=False,
                        ),
                    )
                    job_queue.run_once(
                        partial(check_not_bot, new_mem, chat.id, message.message_id),
                        120,
                        name="welcomemute",
                    )

        if welcome_bool:
            if media_wel:
                sent = await ENUM_FUNC_MAP[welc_type](
                    chat.id,
                    cust_content,
                    caption=res,
                    reply_markup=keyboard,
                    reply_to_message_id=reply,
                    parse_mode="markdown",
                )
            else:
                sent = await send(update, res, keyboard, backup_message)
            prev_welc = sql.get_clean_pref(chat.id)
            if prev_welc:
                try:
                    await bot.delete_message(chat.id, prev_welc)
                except BadRequest:
                    pass

                if sent:
                    sql.set_clean_welcome(chat.id, sent.message_id)

        if welcome_log:
            return welcome_log

        if user.id == new_mem.id:
            welcome_log = (
                f"{html.escape(chat.title)}\n"
                f"#ùêîùêíùêÑùêë_ùêâùêéùêàùêçùêÑùêÉ\n"
                f"<b>·¥ús·¥á Ä</b>: {mention_html(user.id, user.first_name)}\n"
                f"<b>…™·¥Ö</b>: <code>{user.id}</code>"
            )
        elif new_mem.is_bot and user.id != new_mem.id:
            welcome_log = (
                f"{html.escape(chat.title)}\n"
                f"#ùêÅùêéùêì_ùêÄùêÉùêÉùêÑùêÉ\n"
                f"<b> ô·¥è·¥õ</b>: {mention_html(new_mem.id, new_mem.first_name)}\n"
                f"<b>…™·¥Ö</b>: <code>{new_mem.id}</code>"
            )
        else:
            welcome_log = (
                f"{html.escape(chat.title)}\n"
                f"#ùêîùêíùêÑùêë_ùêÄùêÉùêÉùêÑùêÉ\n"
                f"<b>·¥ús·¥á Ä</b>: {mention_html(new_mem.id, new_mem.first_name)}\n"
                f"<b>…™·¥Ö</b>: <code>{new_mem.id}</code>"
            )
        return welcome_log

    return ""


async def check_not_bot(member, chat_id, message_id, context):
    bot = context.bot
    member_dict = VERIFIED_USER_WAITLIST.pop(member.id)
    member_status = member_dict.get("status")
    if not member_status:
        try:
            await bot.unban_chat_member(chat_id, member.id)
        except:
            pass

        try:
            await bot.edit_message_text(
                "*·¥ã…™·¥Ñ·¥ãs ·¥ús·¥á Ä*\n·¥õ ú·¥á è ·¥Ñ·¥Ä…¥ ·¥Ä ü·¥°·¥Ä ès  Ä·¥á·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è.",
                chat_id=chat_id,
                message_id=message_id,
            )
        except:
            pass


async def left_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    chat = update.effective_chat
    user = update.effective_user
    should_goodbye, cust_goodbye, goodbye_type = sql.get_gdbye_pref(chat.id)

    if user.id == bot.id:
        return

    if should_goodbye:
        reply = update.message.message_id
        cleanserv = sql.clean_service(chat.id)
        # Clean service welcome
        if cleanserv:
            try:
                await application.bot.delete_message(chat.id, update.message.message_id)
            except BadRequest:
                pass
            reply = False

        left_mem = update.effective_message.left_chat_member
        if left_mem:

            if is_user_gbanned(left_mem.id):
                return

            if left_mem.id == bot.id:
                return

            if left_mem.id == OWNER_ID:
                await update.effective_message.reply_text(
                    "·¥è…™! …¢·¥á…¥·¥ès!  ú·¥á  ü·¥á“ì·¥õ..",
                    reply_to_message_id=reply,
                )
                return

            elif left_mem.id in DEV_USERS:
                await update.effective_message.reply_text(
                    "s·¥á·¥á  è·¥è·¥ú  ü·¥Ä·¥õ·¥á Ä ·¥Ä·¥õ ·¥õ ú·¥á @AbishnoiMF!",
                    reply_to_message_id=reply,
                )
                return

            # if media goodbye, use appropriate function for it
            if goodbye_type != sql.Types.TEXT and goodbye_type != sql.Types.BUTTON_TEXT:
                # topic_chat = get_action_topic(chat.id)
                await ENUM_FUNC_MAP[goodbye_type](chat.id, cust_goodbye)
                return

            first_name = (
                left_mem.first_name or "PersonWithNoName"
            )  # edge case of empty name - occurs for some bugs.
            if cust_goodbye:
                if cust_goodbye == sql.DEFAULT_GOODBYE:
                    cust_goodbye = random.choice(sql.DEFAULT_GOODBYE_MESSAGES).format(
                        first=escape_markdown(first_name),
                    )
                if left_mem.last_name:
                    fullname = escape_markdown(f"{first_name} {left_mem.last_name}")
                else:
                    fullname = escape_markdown(first_name)
                count = await chat.get_member_count()
                mention = mention_markdown(left_mem.id, first_name)
                if left_mem.username:
                    username = "@" + escape_markdown(left_mem.username)
                else:
                    username = mention

                valid_format = escape_invalid_curly_brackets(
                    cust_goodbye,
                    VALID_WELCOME_FORMATTERS,
                )
                res = valid_format.format(
                    first=escape_markdown(first_name),
                    last=escape_markdown(left_mem.last_name or first_name),
                    fullname=escape_markdown(fullname),
                    username=username,
                    mention=mention,
                    count=count,
                    chatname=escape_markdown(chat.title),
                    id=left_mem.id,
                )
                buttons = sql.get_gdbye_buttons(chat.id)
                keyb = build_keyboard(buttons)

            else:
                res = random.choice(sql.DEFAULT_GOODBYE_MESSAGES).format(
                    first=first_name,
                )
                keyb = []

            keyboard = InlineKeyboardMarkup(keyb)

            await send(
                update,
                res,
                keyboard,
                random.choice(sql.DEFAULT_GOODBYE_MESSAGES).format(first=first_name),
            )


@check_admin(is_user=True)
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    chat = update.effective_chat
    # topic_chat = get_action_topic(chat.id)
    # if no args, show current replies.
    if not args or args[0].lower() == "noformat":
        noformat = True
        pref, welcome_m, cust_content, welcome_type = sql.get_welc_pref(chat.id)
        await update.effective_message.reply_text(
            f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs …™·¥õ's ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á s·¥á·¥õ·¥õ…™…¥…¢ s·¥á·¥õ ·¥õ·¥è: `{pref}`.\n"
            f"*The welcome message (not filling the {{}}) is:*",
            parse_mode=ParseMode.MARKDOWN,
        )

        if welcome_type == sql.Types.BUTTON_TEXT or welcome_type == sql.Types.TEXT:
            buttons = sql.get_welc_buttons(chat.id)
            if noformat:
                welcome_m += revert_buttons(buttons)
                await update.effective_message.reply_text(welcome_m)

            else:
                keyb = build_keyboard(buttons)
                keyboard = InlineKeyboardMarkup(keyb)

                await send(update, welcome_m, keyboard, sql.DEFAULT_WELCOME)
        else:
            buttons = sql.get_welc_buttons(chat.id)
            if noformat:
                welcome_m += revert_buttons(buttons)
                await ENUM_FUNC_MAP[welcome_type](
                    chat.id, cust_content, caption=welcome_m
                )

            else:
                keyb = build_keyboard(buttons)
                keyboard = InlineKeyboardMarkup(keyb)
                ENUM_FUNC_MAP[welcome_type](
                    chat.id,
                    cust_content,
                    caption=welcome_m,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True,
                )

    elif len(args) >= 1:
        if args[0].lower() in ("on", "yes"):
            sql.set_welc_preference(str(chat.id), True)
            await update.effective_message.reply_text(
                "·¥è·¥ã·¥Ä è! I' ü ü …¢ Ä·¥á·¥á·¥õ ·¥ç·¥á·¥ç ô·¥á Äs ·¥° ú·¥á…¥ ·¥õ ú·¥á è ·¥ä·¥è…™…¥.",
            )

        elif args[0].lower() in ("off", "no"):
            sql.set_welc_preference(str(chat.id), False)
            await update.effective_message.reply_text(
                "I' ü ü …¢·¥è  ü·¥è·¥Ä“ì ·¥Ä Ä·¥è·¥ú…¥·¥Ö ·¥Ä…¥·¥Ö …¥·¥è·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥Ä…¥ è·¥è…¥·¥á ·¥õ ú·¥á…¥.",
            )

        else:
            await update.effective_message.reply_text(
                "I ·¥ú…¥·¥Ö·¥á Äs·¥õ·¥Ä…¥·¥Ö '·¥è…¥/ è·¥ás ·¥è Ä 'off/no' ·¥è…¥ ü è!",
            )


@check_admin(is_user=True)
async def goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    chat = update.effective_chat
    # topic_chat = get_action_topic(chat.id)

    if not args or args[0] == "noformat":
        noformat = True
        pref, goodbye_m, goodbye_type = sql.get_gdbye_pref(chat.id)
        await update.effective_message.reply_text(
            f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs …™·¥õ's …¢·¥è·¥è·¥Ö ô è·¥á s·¥á·¥õ·¥õ…™…¥…¢ s·¥á·¥õ ·¥õ·¥è: `{pref}`.\n"
            f"*·¥õ ú·¥á …¢·¥è·¥è·¥Ö ô è·¥á  ·¥ç·¥áss·¥Ä…¢·¥á (…¥·¥è·¥õ “ì…™ ü ü…™…¥…¢ ·¥õ ú·¥á {{}}) …™s:*",
            parse_mode=ParseMode.MARKDOWN,
        )

        if goodbye_type == sql.Types.BUTTON_TEXT:
            buttons = sql.get_gdbye_buttons(chat.id)
            if noformat:
                goodbye_m += revert_buttons(buttons)
                await update.effective_message.reply_text(goodbye_m)

            else:
                keyb = build_keyboard(buttons)
                keyboard = InlineKeyboardMarkup(keyb)

                await send(update, goodbye_m, keyboard, sql.DEFAULT_GOODBYE)

        else:
            if noformat:
                await ENUM_FUNC_MAP[goodbye_type](chat.id, goodbye_m)

            else:
                await ENUM_FUNC_MAP[goodbye_type](
                    chat.id, goodbye_m, parse_mode=ParseMode.MARKDOWN
                )

    elif len(args) >= 1:
        if args[0].lower() in ("on", "yes"):
            sql.set_gdbye_preference(str(chat.id), True)
            await update.effective_message.reply_text("·¥è·¥ã  ô·¥Ä ô è!")

        elif args[0].lower() in ("off", "no"):
            sql.set_gdbye_preference(str(chat.id), False)
            await update.effective_message.reply_text("·¥è·¥ã  ô·¥Ä ô è!")

        else:
            # idek what you're writing, say yes or no
            await update.effective_message.reply_text(
                "I ·¥ú…¥·¥Ö·¥á Äs·¥õ·¥Ä…¥·¥Ö '·¥è…¥/ è·¥ás ·¥è Ä 'off/no' ·¥è…¥ ü è!",
            )


@check_admin(is_user=True)
@loggable
async def set_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message

    text, data_type, content, buttons = get_welcome_type(msg)

    if data_type is None:
        await msg.reply_text(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ s·¥ò·¥á·¥Ñ…™“ì è ·¥° ú·¥Ä·¥õ ·¥õ·¥è  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú!")
        return ""

    sql.set_custom_welcome(chat.id, content, text, data_type, buttons)
    await msg.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á!")

    return (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêíùêÑùêì_ùêñùêÑùêãùêÇùêéùêåùêÑ\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"s·¥á·¥õ ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á."
    )


@check_admin(is_user=True)
@loggable
async def reset_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    chat = update.effective_chat
    user = update.effective_user

    sql.set_custom_welcome(chat.id, None, sql.DEFAULT_WELCOME, sql.Types.TEXT)
    await update.effective_message.reply_text(
        "s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥ás·¥á·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ!",
    )

    return (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêëùêÑùêíùêÑùêì_ùêñùêÑùêãùêÇùêéùêåùêÑ\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f" Ä·¥ás·¥á·¥õ ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ."
    )


@check_admin(is_user=True)
@loggable
async def set_goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message
    text, data_type, content, buttons = get_welcome_type(msg)

    if data_type is None:
        await msg.reply_text(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ s·¥ò·¥á·¥Ñ…™“ì è ·¥° ú·¥Ä·¥õ ·¥õ·¥è  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú!")
        return ""

    sql.set_custom_gdbye(chat.id, content or text, data_type, buttons)
    await msg.reply_text("s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á·¥õ ·¥Ñ·¥ús·¥õ·¥è·¥ç …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á!")
    return (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#ùêíùêÑùêì_ùêÜùêéùêéùêÉùêÅùêòùêÑ\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f"s·¥á·¥õ ·¥õ ú·¥á …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á."
    )


@check_admin(is_user=True)
@loggable
async def reset_goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    chat = update.effective_chat
    user = update.effective_user

    sql.set_custom_gdbye(chat.id, sql.DEFAULT_GOODBYE, sql.Types.TEXT)
    await update.effective_message.reply_text(
        "s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥ás·¥á·¥õ …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ!",
    )

    return (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#RESET_GOODBYE\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
        f" Ä·¥ás·¥á·¥õ ·¥õ ú·¥á …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á."
    )


@check_admin(is_user=True)
@loggable
async def welcomemute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    args = context.args
    chat = update.effective_chat
    user = update.effective_user
    msg = update.effective_message

    if len(args) >= 1:
        if args[0].lower() in ("off", "no"):
            sql.set_welcome_mutes(chat.id, False)
            await msg.reply_text("I will no longer mute people on joining!")
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#WELCOME_MUTE\n"
                f"<b>‚Ä¢·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f" ú·¥Äs ·¥õ·¥è…¢…¢ ü·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥ú·¥õ·¥á ·¥õ·¥è <b>·¥è“ì“ì</b>."
            )
        elif args[0].lower() in ["soft"]:
            sql.set_welcome_mutes(chat.id, "soft")
            await msg.reply_text(
                "I ·¥°…™ ü ü  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ·¥è s·¥á…¥·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä “ì·¥è Ä 24  ú·¥è·¥ú Äs.",
            )
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#ùêñùêÑùêãùêÇùêéùêåùêÑ_ùêåùêîùêìùêÑ\n"
                f"<b>‚Ä¢·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f" ú·¥Äs ·¥õ·¥è…¢…¢ ü·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥ú·¥õ·¥á ·¥õ·¥è <b>s·¥è“ì·¥õ</b>."
            )
        elif args[0].lower() in ["strong"]:
            sql.set_welcome_mutes(chat.id, "strong")
            await msg.reply_text(
                "I ·¥°…™ ü ü …¥·¥è·¥° ·¥ç·¥ú·¥õ·¥á ·¥ò·¥á·¥è·¥ò ü·¥á ·¥° ú·¥á…¥ ·¥õ ú·¥á è ·¥ä·¥è…™…¥ ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è ·¥ò Ä·¥è·¥†·¥á ·¥õ ú·¥á è' Ä·¥á …¥·¥è·¥õ ·¥Ä  ô·¥è·¥õ.\n·¥õ ú·¥á è ·¥°…™ ü ü  ú·¥Ä·¥†·¥á 120s·¥á·¥Ñ·¥è…¥·¥Ös  ô·¥á“ì·¥è Ä·¥á ·¥õ ú·¥á è …¢·¥á·¥õ ·¥ã…™·¥Ñ·¥ã·¥á·¥Ö.",
            )
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#ùêñùêÑùêãùêÇùêéùêåùêÑ_ùêåùêîùêìùêÑ\n"
                f"<b>‚Ä¢·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f" ú·¥Äs ·¥õ·¥è…¢…¢ ü·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥ú·¥õ·¥á ·¥õ·¥è <b>s·¥õ Ä·¥è…¥…¢</b>."
            )
        else:
            await msg.reply_text(
                "·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä <code>·¥è“ì“ì</code>/<code>…¥·¥è</code>/<code>s·¥è“ì·¥õ</code>/<code>s·¥õ Ä·¥è…¥…¢</code>!",
                parse_mode=ParseMode.HTML,
            )
            return ""
    else:
        curr_setting = sql.welcome_mutes(chat.id)
        reply = (
            f"\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä s·¥á·¥õ·¥õ…™…¥…¢!\n·¥Ñ ú·¥è·¥ès·¥á ·¥è…¥·¥á ·¥è·¥ú·¥õ ·¥è“ì: <code>·¥è“ì“ì</code>/<code>…¥·¥è</code> ·¥è Ä <code>s·¥è“ì·¥õ</code> or <code>s·¥õ Ä·¥è…¥…¢</code> ·¥è…¥ ü è! \n"
            f"·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢: <code>{curr_setting}</code>"
        )
        await msg.reply_text(reply, parse_mode=ParseMode.HTML)
        return ""


@check_admin(is_user=True)
@loggable
async def clean_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    args = context.args
    chat = update.effective_chat
    user = update.effective_user

    if not args:
        clean_pref = sql.get_clean_pref(chat.id)
        if clean_pref:
            await update.effective_message.reply_text(
                "I s ú·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥ú·¥ò ·¥õ·¥è ·¥õ·¥°·¥è ·¥Ö·¥Ä ès ·¥è ü·¥Ö.",
            )
        else:
            await update.effective_message.reply_text(
                "I'·¥ç ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è …¥·¥è·¥õ ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥è ü·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás!",
            )
        return ""

    if args[0].lower() in ("on", "yes"):
        sql.set_clean_welcome(str(chat.id), True)
        await update.effective_message.reply_text(
            "I' ü ü ·¥õ Ä è ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥è ü·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás!"
        )
        return (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêÇùêãùêÑùêÄùêç_ùêñùêÑùêãùêÇùêéùêåùêÑ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
            f" ú·¥Äs ·¥õ·¥è…¢…¢ ü·¥á·¥Ö ·¥Ñ ü·¥á·¥Ä…¥ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás ·¥õ·¥è <code>·¥è…¥</code>."
        )
    elif args[0].lower() in ("off", "no"):
        sql.set_clean_welcome(str(chat.id), False)
        await update.effective_message.reply_text(
            "I won't delete old welcome messages."
        )
        return (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#ùêÇùêãùêÑùêÄùêç_ùêñùêÑùêãùêÇùêéùêåùêÑ\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
            f" ú·¥Äs ·¥õ·¥è…¢…¢ ü·¥á·¥Ö ·¥Ñ ü·¥á·¥Ä…¥ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás ·¥õ·¥è <code>·¥è“ì“ì</code>."
        )
    else:
        await update.effective_message.reply_text(
            "I ·¥ú…¥·¥Ö·¥á Äs·¥õ·¥Ä…¥·¥Ö '·¥è…¥/ è·¥ás ·¥è Ä '·¥è“ì“ì/…¥·¥è ·¥è…¥ ü è!"
        )
        return ""


@check_admin(is_user=True)
async def cleanservice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    args = context.args
    chat = update.effective_chat  # type: Optional[Chat]
    if chat.type != chat.PRIVATE:
        if len(args) >= 1:
            var = args[0]
            if var in ("no", "off"):
                sql.set_clean_service(chat.id, False)
                await update.effective_message.reply_text(
                    "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥Ñ ü·¥á·¥Ä…¥ s·¥á Ä·¥†…™·¥Ñ·¥á …™s : off"
                )
            elif var in ("yes", "on"):
                sql.set_clean_service(chat.id, True)
                await update.effective_message.reply_text(
                    "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥Ñ ü·¥á·¥Ä…¥ s·¥á Ä·¥†…™·¥Ñ·¥á …™s : on"
                )
            else:
                await update.effective_message.reply_text(
                    "…™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥",
                    parse_mode=ParseMode.HTML,
                )
        else:
            await update.effective_message.reply_text(
                "·¥ús·¥Ä…¢·¥á …™s <code>·¥è…¥</code>/<code> è·¥ás</code> ·¥è Ä <code>·¥è“ì“ì</code>/<code>…¥·¥è</code>",
                parse_mode=ParseMode.HTML,
            )
    else:
        curr = sql.clean_service(chat.id)
        if curr:
            await update.effective_message.reply_text(
                "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥Ñ ü·¥á·¥Ä…¥ s·¥á Ä·¥†…™·¥Ñ·¥á …™s : <code>on</code>",
                parse_mode=ParseMode.HTML,
            )
        else:
            await update.effective_message.reply_text(
                "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥Ñ ü·¥á·¥Ä…¥ s·¥á Ä·¥†…™·¥Ñ·¥á …™s : <code>·¥è“ì“ì</code>",
                parse_mode=ParseMode.HTML,
            )


async def user_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    query = update.callback_query
    bot = context.bot
    match = re.match(r"user_join_\((.+?)\)", query.data)
    message = update.effective_message
    join_user = int(match.group(1))

    if join_user == user.id:
        sql.set_human_checks(user.id, chat.id)
        member_dict = VERIFIED_USER_WAITLIST.pop(user.id)
        member_dict["status"] = True
        VERIFIED_USER_WAITLIST.update({user.id: member_dict})
        await query.answer(text=" è·¥á·¥á·¥õ!  è·¥è·¥ú' Ä·¥á ·¥Ä  ú·¥ú·¥ç·¥Ä…¥, ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö!")
        await bot.restrict_chat_member(
            chat.id,
            user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_send_polls=True,
                can_change_info=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_manage_topics=False,
            ),
        )
        try:
            await bot.deleteMessage(chat.id, message.message_id)
        except:
            pass
        if member_dict["should_welc"]:
            if member_dict["media_wel"]:
                # topic_chat = get_action_topic(chat.id)
                sent = await ENUM_FUNC_MAP[member_dict["welc_type"]](
                    member_dict["chat_id"],
                    member_dict["cust_content"],
                    caption=member_dict["res"],
                    reply_markup=member_dict["keyboard"],
                    parse_mode="markdown",
                )
            else:
                sent = await send(
                    member_dict["update"],
                    member_dict["res"],
                    member_dict["keyboard"],
                    member_dict["backup_message"],
                )

            prev_welc = sql.get_clean_pref(chat.id)
            if prev_welc:
                try:
                    await bot.delete_message(chat.id, prev_welc)
                except BadRequest:
                    pass

                if sent:
                    sql.set_clean_welcome(chat.id, sent.message_id)

    else:
        await query.answer(text=" è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s!")


WELC_MUTE_HELP_TXT = (
    " è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á …¥·¥á·¥° ·¥ò·¥á·¥è·¥ò ü·¥á ·¥° ú·¥è ·¥ä·¥è…™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö  ú·¥á…¥·¥Ñ·¥á ·¥ò Ä·¥á·¥†·¥á…¥·¥õ s·¥ò·¥Ä·¥ç ô·¥è·¥õs “ì Ä·¥è·¥ç “ì ü·¥è·¥è·¥Ö…™…¥…¢  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò. "
    "The following options are ·¥ò·¥èss…™ ô ü·¥á:\n"
    "‚Ä¢ `/welcomemute s·¥è“ì·¥õ`*:*  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õs …¥·¥á·¥° ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç s·¥á…¥·¥Ö…™…¥…¢ ·¥ç·¥á·¥Ö…™·¥Ä “ì·¥è Ä 24  ú·¥è·¥ú Äs.\n"
    "‚Ä¢ `/welcomemute s·¥õ Ä·¥è…¥…¢`*:* ·¥ç·¥ú·¥õ·¥ás …¥·¥á·¥° ·¥ç·¥á·¥ç ô·¥á Äs ·¥õ…™ ü ü ·¥õ ú·¥á è ·¥õ·¥Ä·¥ò ·¥è…¥ ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ ú·¥á Ä·¥á ô è ·¥†·¥á Ä…™“ì è…™…¥…¢ ·¥õ ú·¥á è' Ä·¥á  ú·¥ú·¥ç·¥Ä…¥.\n"
    "‚Ä¢ `/welcomemute off`*:* ·¥õ·¥ú Ä…¥s ·¥è“ì“ì ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á·¥ç·¥ú·¥õ·¥á.\n"
    "*…¥·¥è·¥õ·¥á:* s·¥õ Ä·¥è…¥…¢ ·¥ç·¥è·¥Ö·¥á ·¥ã…™·¥Ñ·¥ãs ·¥Ä ·¥ús·¥á Ä “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ …™“ì ·¥õ ú·¥á è ·¥Ö·¥è…¥'·¥õ ·¥†·¥á Ä…™“ì è …™…¥ 120s·¥á·¥Ñ·¥è…¥·¥Ös. ·¥õ ú·¥á è ·¥Ñ·¥Ä…¥ ·¥Ä ü·¥°·¥Ä ès  Ä·¥á·¥ä·¥è…™…¥ ·¥õ ú·¥è·¥ú…¢ ú"
)


@check_admin(is_user=True)
async def welcome_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    WELC_HELP_TXT = (
        " è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò's ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á/…¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ñ·¥Ä…¥  ô·¥á ·¥ò·¥á Äs·¥è…¥·¥Ä ü…™s·¥á·¥Ö …™…¥ ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥°·¥Ä ès. …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥ás"
        " ·¥õ·¥è  ô·¥á …™…¥·¥Ö…™·¥†…™·¥Ö·¥ú·¥Ä ü ü è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö,  ü…™·¥ã·¥á ·¥õ ú·¥á ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á …™s,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á *·¥õ ú·¥ás·¥á* ·¥†·¥Ä Ä…™·¥Ä ô ü·¥ás:\n"
        " ‚Ä¢ `{first}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's *“ì…™ Äs·¥õ* …¥·¥Ä·¥ç·¥á\n"
        " ‚Ä¢ `{last}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's * ü·¥Äs·¥õ* …¥·¥Ä·¥ç·¥á. ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õs ·¥õ·¥è *“ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á* …™“ì user  ú·¥Äs …¥·¥è "
        " ü·¥Äs·¥õ …¥·¥Ä·¥ç·¥á.\n"
        " ‚Ä¢ `{fullname}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's *“ì·¥ú ü ü* …¥·¥Ä·¥ç·¥á. ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õs ·¥õ·¥è *“ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á* …™“ì ·¥ús·¥á Ä  ú·¥Äs …¥·¥è "
        "last name.\n"
        " ‚Ä¢ `{username}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's *·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á*. ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õs ·¥õ·¥è ·¥Ä *·¥ç·¥á…¥·¥õ…™·¥è…¥* ·¥è“ì ·¥õ ú·¥á ·¥ús·¥á Ä's "
        "“ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á …™“ì  ú·¥Äs …¥·¥è ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á.\n"
        " ‚Ä¢ `{mention}`*:* ·¥õ ú…™s s…™·¥ç·¥ò ü è *·¥ç·¥á…¥·¥õ…™·¥è…¥s* ·¥Ä ·¥ús·¥á Ä - ·¥õ·¥Ä…¢…¢…™…¥…¢ ·¥õ ú·¥á·¥ç ·¥°…™·¥õ ú ·¥õ ú·¥á…™ Ä “ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á.\n"
        " ‚Ä¢ `{id}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's *…™·¥Ö*\n"
        " ‚Ä¢ `{count}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á ·¥ús·¥á Ä's *·¥ç·¥á·¥ç ô·¥á Ä …¥·¥ú·¥ç ô·¥á Ä*.\n"
        " ‚Ä¢ `{chatname}`*:* ·¥õ ú…™s  Ä·¥á·¥ò Ä·¥ás·¥á…¥·¥õs ·¥õ ú·¥á *·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ñ ú·¥Ä·¥õ …¥·¥Ä·¥ç·¥á*.\n"
        "\n·¥á·¥Ä·¥Ñ ú ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á MUST  ô·¥á s·¥ú Ä Ä·¥è·¥ú…¥·¥Ö·¥á·¥Ö  ô è `{}` ·¥õ·¥è  ô·¥á  Ä·¥á·¥ò ü·¥Ä·¥Ñ·¥á·¥Ö.\n"
        "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä üs·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç·¥Ä Ä·¥ã·¥Ö·¥è·¥°…¥, s·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä·¥ã·¥á ·¥Ä…¥ è ·¥á ü·¥á·¥ç·¥á…¥·¥õs  ô·¥è ü·¥Ö/…™·¥õ·¥Ä ü…™·¥Ñ/·¥Ñ·¥è·¥Ö·¥á/ ü…™…¥·¥ãs. "
        " ô·¥ú·¥õ·¥õ·¥è…¥s ·¥Ä Ä·¥á ·¥Ä üs·¥è s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö, s·¥è  è·¥è·¥ú can ·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás  ü·¥è·¥è·¥ã ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥°…™·¥õ ú s·¥è·¥ç·¥á …¥…™·¥Ñ·¥á intro "
        "buttons.\n"
        f"·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥  ü…™…¥·¥ã…™…¥…¢ ·¥õ·¥è  è·¥è·¥ú Ä  Ä·¥ú ü·¥ás, ·¥ús·¥á ·¥õ ú…™s: `[ Ä·¥ú ü·¥ás](buttonurl://t.me/{context.bot.username}?start=group_id)`. "
        "s…™·¥ç·¥ò ü è  Ä·¥á·¥ò ü·¥Ä·¥Ñ·¥á `group_id` ·¥°…™·¥õ ú  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò's …™·¥Ö, ·¥° ú…™·¥Ñ ú ·¥Ñ·¥Ä…¥  ô·¥á ·¥è ô·¥õ·¥Ä…™…¥·¥á·¥Ö ·¥†…™·¥Ä /id, ·¥Ä…¥·¥Ö  è·¥è·¥ú' Ä·¥á …¢·¥è·¥è·¥Ö ·¥õ·¥è "
        "…¢·¥è. …¥·¥è·¥õ·¥á ·¥õ ú·¥Ä·¥õ …¢ Ä·¥è·¥ú·¥ò …™·¥Ös ·¥Ä Ä·¥á ·¥ús·¥ú·¥Ä ü ü è ·¥ò Ä·¥á·¥Ñ·¥á·¥Ö·¥á·¥Ö  ô è ·¥Ä `-` s…™…¢…¥; ·¥õ ú…™s …™s  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö, s·¥è ·¥ò ü·¥á·¥Äs·¥á ·¥Ö·¥è…¥'·¥õ "
        " Ä·¥á·¥ç·¥è·¥†·¥á …™·¥õ.\n"
        " è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥á·¥†·¥á…¥ s·¥á·¥õ …™·¥ç·¥Ä…¢·¥ás/…¢…™“ìs/·¥†…™·¥Ö·¥á·¥ès/·¥†·¥è…™·¥Ñ·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Äs ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á  ô è "
        " Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥õ ú·¥á ·¥Ö·¥ás…™ Ä·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä, ·¥Ä…¥·¥Ö ·¥Ñ·¥Ä ü ü…™…¥…¢ `/setwelcome`."
    )

    await update.effective_message.reply_text(
        WELC_HELP_TXT, parse_mode=ParseMode.MARKDOWN
    )


@check_admin(is_user=True)
async def welcome_mute_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        WELC_MUTE_HELP_TXT,
        parse_mode=ParseMode.MARKDOWN,
    )


# TODO: get welcome data from group butler snap
# def __import_data__(chat_id, data):
#     welcome = data.get('info', {}).get('rules')
#     welcome = welcome.replace('$username', '{username}')
#     welcome = welcome.replace('$name', '{fullname}')
#     welcome = welcome.replace('$id', '{id}')
#     welcome = welcome.replace('$title', '{chatname}')
#     welcome = welcome.replace('$surname', '{lastname}')
#     welcome = welcome.replace('$rules', '{rules}')
#     sql.set_custom_welcome(chat_id, welcome, sql.Types.TEXT)


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    welcome_pref = sql.get_welc_pref(chat_id)[0]
    goodbye_pref = sql.get_gdbye_pref(chat_id)[0]
    return (
        "·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ  ú·¥Äs …™·¥õ's ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á s·¥á·¥õ ·¥õ·¥è `{}`.\n"
        "…™·¥õ's …¢·¥è·¥è·¥Ö ô è·¥á ·¥ò Ä·¥á“ì·¥á Ä·¥á…¥·¥Ñ·¥á …™s `{}`.".format(welcome_pref, goodbye_pref)
    )


__help__ = """
*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è:*
‚Ä¢ /welcome <·¥è…¥/·¥è“ì“ì>*:* ·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás.
‚Ä¢ /welcome*:* s ú·¥è·¥°s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á s·¥á·¥õ·¥õ…™…¥…¢s.
‚Ä¢ /welcome noformat*:* s ú·¥è·¥°s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á s·¥á·¥õ·¥õ…™…¥…¢s, ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢ - ·¥ús·¥á“ì·¥ú ü ·¥õ·¥è  Ä·¥á·¥Ñ è·¥Ñ ü·¥á  è·¥è·¥ú Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás!
‚Ä¢ /goodbye*:* s·¥Ä·¥ç·¥á ·¥ús·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥Ä Ä…¢s ·¥Äs `/welcome`
‚Ä¢ /setwelcome <s·¥è·¥ç·¥á·¥õ·¥áx·¥õ>*:* s·¥á·¥õ ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á. …™“ì ·¥ús·¥á·¥Ö  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥ç·¥á·¥Ö…™·¥Ä, ·¥ús·¥ás ·¥õ ú·¥Ä·¥õ ·¥ç·¥á·¥Ö…™·¥Ä.
‚Ä¢ /setgoodbye <s·¥è·¥ç·¥á·¥õ·¥áx·¥õ>*:* s·¥á·¥õ ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á. …™“ì ·¥ús·¥á·¥Ö  Ä·¥á·¥ò ü è…™…¥…¢ ·¥õ·¥è ·¥ç·¥á·¥Ö…™·¥Ä, ·¥ús·¥ás ·¥õ ú·¥Ä·¥õ ·¥ç·¥á·¥Ö…™·¥Ä.
‚Ä¢ /resetwelcome*:*  Ä·¥ás·¥á·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á.
‚Ä¢ /resetgoodbye*:*  Ä·¥ás·¥á·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥á.
‚Ä¢ /cleanwelcome <·¥è…¥/·¥è“ì“ì>*:* ·¥è…¥ …¥·¥á·¥° ·¥ç·¥á·¥ç ô·¥á Ä, ·¥õ Ä è ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á ·¥ò Ä·¥á·¥†…™·¥è·¥ús ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö s·¥ò·¥Ä·¥ç·¥ç…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.
‚Ä¢ /welcomemutehelp*:* …¢…™·¥†·¥ás …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥ú·¥õ·¥ás.
‚Ä¢ /cleanservice <·¥è…¥/·¥è“ì“ì*:* ·¥Ö·¥á ü·¥á·¥õ·¥ás ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥çs ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á/ ü·¥á“ì·¥õ s·¥á Ä·¥†…™·¥Ñ·¥á ·¥ç·¥áss·¥Ä…¢·¥ás.

*·¥áx·¥Ä·¥ç·¥ò ü·¥á:*
·¥ús·¥á Ä ·¥ä·¥è…™…¥·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ, ·¥ús·¥á Ä  ü·¥á“ì·¥õ ·¥Ñ ú·¥Ä·¥õ.

*·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥Ä Ä·¥ã·¥Ö·¥è·¥°…¥:*
‚Ä¢ /welcomehelp*:* ·¥†…™·¥á·¥° ·¥ç·¥è Ä·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ·¥õ…™…¥…¢ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ “ì·¥è Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á/…¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥ás.
"""

NEW_MEM_HANDLER = MessageHandler(
    filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member, allow_edit=True, block=False
)
LEFT_MEM_HANDLER = MessageHandler(
    filters.StatusUpdate.LEFT_CHAT_MEMBER, left_member, allow_edit=True, block=False
)
WELC_PREF_HANDLER = CommandHandler(
    "welcome", welcome, filters=filters.ChatType.GROUPS, block=False
)
GOODBYE_PREF_HANDLER = CommandHandler(
    "goodbye", goodbye, filters=filters.ChatType.GROUPS, block=False
)
SET_WELCOME = CommandHandler(
    "setwelcome", set_welcome, filters=filters.ChatType.GROUPS, block=False
)
SET_GOODBYE = CommandHandler(
    "setgoodbye", set_goodbye, filters=filters.ChatType.GROUPS, block=False
)
RESET_WELCOME = CommandHandler(
    "resetwelcome", reset_welcome, filters=filters.ChatType.GROUPS, block=False
)
RESET_GOODBYE = CommandHandler(
    "resetgoodbye", reset_goodbye, filters=filters.ChatType.GROUPS, block=False
)
WELCOMEMUTE_HANDLER = CommandHandler(
    "welcomemute", welcomemute, filters=filters.ChatType.GROUPS, block=False
)
CLEAN_SERVICE_HANDLER = CommandHandler(
    "cleanservice", cleanservice, filters=filters.ChatType.GROUPS, block=False
)
CLEAN_WELCOME = CommandHandler(
    "cleanwelcome", clean_welcome, filters=filters.ChatType.GROUPS, block=False
)
WELCOME_HELP = CommandHandler("welcomehelp", welcome_help, block=False)
WELCOME_MUTE_HELP = CommandHandler("welcomemutehelp", welcome_mute_help, block=False)
BUTTON_VERIFY_HANDLER = CallbackQueryHandler(
    user_button, pattern=r"user_join_", block=False
)

application.add_handler(NEW_MEM_HANDLER)
application.add_handler(LEFT_MEM_HANDLER)
application.add_handler(WELC_PREF_HANDLER)
application.add_handler(GOODBYE_PREF_HANDLER)
application.add_handler(SET_WELCOME)
application.add_handler(SET_GOODBYE)
application.add_handler(RESET_WELCOME)
application.add_handler(RESET_GOODBYE)
application.add_handler(CLEAN_WELCOME)
application.add_handler(WELCOME_HELP)
application.add_handler(WELCOMEMUTE_HANDLER)
application.add_handler(CLEAN_SERVICE_HANDLER)
application.add_handler(BUTTON_VERIFY_HANDLER)
application.add_handler(WELCOME_MUTE_HELP)

__mod_name__ = "ùêñ·¥á ü·¥Ñ·¥è·¥ç·¥á"
__command_list__ = []
__handlers__ = [
    NEW_MEM_HANDLER,
    LEFT_MEM_HANDLER,
    WELC_PREF_HANDLER,
    GOODBYE_PREF_HANDLER,
    SET_WELCOME,
    SET_GOODBYE,
    RESET_WELCOME,
    RESET_GOODBYE,
    CLEAN_WELCOME,
    WELCOME_HELP,
    WELCOMEMUTE_HANDLER,
    CLEAN_SERVICE_HANDLER,
    BUTTON_VERIFY_HANDLER,
    WELCOME_MUTE_HELP,
]
